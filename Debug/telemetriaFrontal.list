
telemetriaFrontal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003804  08003804  00013804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800383c  0800383c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800383c  0800383c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800383c  0800383c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800383c  0800383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000000c  08003850  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08003850  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dffd  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c6  00000000  00000000  0002e032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  000302f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  000311d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e7e  00000000  00000000  00031fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f784  00000000  00000000  00049e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dff2  00000000  00000000  000595e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e75d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea8  00000000  00000000  000e7624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080037ec 	.word	0x080037ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080037ec 	.word	0x080037ec

0800014c <readADC>:
static void MX_CAN_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
uint16_t readADC(uint32_t channel)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	sConfig.Channel = channel;
 8000154:	4a12      	ldr	r2, [pc, #72]	; (80001a0 <readADC+0x54>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
	sConfig.Rank = 1;
 800015a:	4b11      	ldr	r3, [pc, #68]	; (80001a0 <readADC+0x54>)
 800015c:	2201      	movs	r2, #1
 800015e:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000160:	4b0f      	ldr	r3, [pc, #60]	; (80001a0 <readADC+0x54>)
 8000162:	2200      	movs	r2, #0
 8000164:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000166:	490e      	ldr	r1, [pc, #56]	; (80001a0 <readADC+0x54>)
 8000168:	480e      	ldr	r0, [pc, #56]	; (80001a4 <readADC+0x58>)
 800016a:	f001 f99d 	bl	80014a8 <HAL_ADC_ConfigChannel>
 800016e:	4603      	mov	r3, r0
 8000170:	2b00      	cmp	r3, #0
 8000172:	d001      	beq.n	8000178 <readADC+0x2c>
	{
		Error_Handler();
 8000174:	f000 fb9e 	bl	80008b4 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 8000178:	480a      	ldr	r0, [pc, #40]	; (80001a4 <readADC+0x58>)
 800017a:	f000 fed3 	bl	8000f24 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 800017e:	2101      	movs	r1, #1
 8000180:	4808      	ldr	r0, [pc, #32]	; (80001a4 <readADC+0x58>)
 8000182:	f000 ffa9 	bl	80010d8 <HAL_ADC_PollForConversion>
	uint16_t out = HAL_ADC_GetValue(&hadc1);
 8000186:	4807      	ldr	r0, [pc, #28]	; (80001a4 <readADC+0x58>)
 8000188:	f001 f8ac 	bl	80012e4 <HAL_ADC_GetValue>
 800018c:	4603      	mov	r3, r0
 800018e:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Stop(&hadc1);
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <readADC+0x58>)
 8000192:	f000 ff75 	bl	8001080 <HAL_ADC_Stop>
	return out;
 8000196:	89fb      	ldrh	r3, [r7, #14]
}
 8000198:	4618      	mov	r0, r3
 800019a:	3710      	adds	r7, #16
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	20000150 	.word	0x20000150
 80001a4:	20000028 	.word	0x20000028

080001a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	TxHeader.StdId = 0x0;
 80001ae:	4b8d      	ldr	r3, [pc, #564]	; (80003e4 <main+0x23c>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x0;
 80001b4:	4b8b      	ldr	r3, [pc, #556]	; (80003e4 <main+0x23c>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 80001ba:	4b8a      	ldr	r3, [pc, #552]	; (80003e4 <main+0x23c>)
 80001bc:	2200      	movs	r2, #0
 80001be:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA ;
 80001c0:	4b88      	ldr	r3, [pc, #544]	; (80003e4 <main+0x23c>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 8;
 80001c6:	4b87      	ldr	r3, [pc, #540]	; (80003e4 <main+0x23c>)
 80001c8:	2208      	movs	r2, #8
 80001ca:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80001cc:	4b85      	ldr	r3, [pc, #532]	; (80003e4 <main+0x23c>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	751a      	strb	r2, [r3, #20]

	TxHeader2.StdId = 0x5;
 80001d2:	4b85      	ldr	r3, [pc, #532]	; (80003e8 <main+0x240>)
 80001d4:	2205      	movs	r2, #5
 80001d6:	601a      	str	r2, [r3, #0]
	TxHeader2.ExtId = 0x0;
 80001d8:	4b83      	ldr	r3, [pc, #524]	; (80003e8 <main+0x240>)
 80001da:	2200      	movs	r2, #0
 80001dc:	605a      	str	r2, [r3, #4]
	TxHeader2.IDE = CAN_ID_STD;
 80001de:	4b82      	ldr	r3, [pc, #520]	; (80003e8 <main+0x240>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	609a      	str	r2, [r3, #8]
	TxHeader2.RTR = CAN_RTR_DATA ;
 80001e4:	4b80      	ldr	r3, [pc, #512]	; (80003e8 <main+0x240>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	60da      	str	r2, [r3, #12]
	TxHeader2.DLC = 8;
 80001ea:	4b7f      	ldr	r3, [pc, #508]	; (80003e8 <main+0x240>)
 80001ec:	2208      	movs	r2, #8
 80001ee:	611a      	str	r2, [r3, #16]
	TxHeader2.TransmitGlobalTime = DISABLE;
 80001f0:	4b7d      	ldr	r3, [pc, #500]	; (80003e8 <main+0x240>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f6:	f000 fd37 	bl	8000c68 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fa:	f000 f90f 	bl	800041c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fe:	f000 faf3 	bl	80007e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000202:	f000 fad3 	bl	80007ac <MX_DMA_Init>
  MX_ADC1_Init();
 8000206:	f000 f965 	bl	80004d4 <MX_ADC1_Init>
  MX_CAN_Init();
 800020a:	f000 f9f7 	bl	80005fc <MX_CAN_Init>
  MX_USART1_UART_Init();
 800020e:	f000 faa3 	bl	8000758 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000212:	f000 fa53 	bl	80006bc <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		tps1 = readADC(ADC_CHANNEL_3);
 8000216:	2003      	movs	r0, #3
 8000218:	f7ff ff98 	bl	800014c <readADC>
 800021c:	4603      	mov	r3, r0
 800021e:	461a      	mov	r2, r3
 8000220:	4b72      	ldr	r3, [pc, #456]	; (80003ec <main+0x244>)
 8000222:	801a      	strh	r2, [r3, #0]
		tps2 = readADC(ADC_CHANNEL_4);
 8000224:	2004      	movs	r0, #4
 8000226:	f7ff ff91 	bl	800014c <readADC>
 800022a:	4603      	mov	r3, r0
 800022c:	461a      	mov	r2, r3
 800022e:	4b70      	ldr	r3, [pc, #448]	; (80003f0 <main+0x248>)
 8000230:	801a      	strh	r2, [r3, #0]
		pressao1 = readADC(ADC_CHANNEL_5);
 8000232:	2005      	movs	r0, #5
 8000234:	f7ff ff8a 	bl	800014c <readADC>
 8000238:	4603      	mov	r3, r0
 800023a:	461a      	mov	r2, r3
 800023c:	4b6d      	ldr	r3, [pc, #436]	; (80003f4 <main+0x24c>)
 800023e:	801a      	strh	r2, [r3, #0]
		pressao2 = readADC(ADC_CHANNEL_6);
 8000240:	2006      	movs	r0, #6
 8000242:	f7ff ff83 	bl	800014c <readADC>
 8000246:	4603      	mov	r3, r0
 8000248:	461a      	mov	r2, r3
 800024a:	4b6b      	ldr	r3, [pc, #428]	; (80003f8 <main+0x250>)
 800024c:	801a      	strh	r2, [r3, #0]
		pressao3 = readADC(ADC_CHANNEL_7);
 800024e:	2007      	movs	r0, #7
 8000250:	f7ff ff7c 	bl	800014c <readADC>
 8000254:	4603      	mov	r3, r0
 8000256:	461a      	mov	r2, r3
 8000258:	4b68      	ldr	r3, [pc, #416]	; (80003fc <main+0x254>)
 800025a:	801a      	strh	r2, [r3, #0]
		//encoder = readADC(ADC_CHANNEL_6);

		bots = HAL_GPIO_ReadPin(GPIOB , GPIO_PIN_0);
 800025c:	2101      	movs	r1, #1
 800025e:	4868      	ldr	r0, [pc, #416]	; (8000400 <main+0x258>)
 8000260:	f002 f992 	bl	8002588 <HAL_GPIO_ReadPin>
 8000264:	4603      	mov	r3, r0
 8000266:	71fb      	strb	r3, [r7, #7]
		botao_shut = HAL_GPIO_ReadPin(GPIOB , GPIO_PIN_1);
 8000268:	2102      	movs	r1, #2
 800026a:	4865      	ldr	r0, [pc, #404]	; (8000400 <main+0x258>)
 800026c:	f002 f98c 	bl	8002588 <HAL_GPIO_ReadPin>
 8000270:	4603      	mov	r3, r0
 8000272:	71bb      	strb	r3, [r7, #6]
		inertia = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	4863      	ldr	r0, [pc, #396]	; (8000404 <main+0x25c>)
 8000278:	f002 f986 	bl	8002588 <HAL_GPIO_ReadPin>
 800027c:	4603      	mov	r3, r0
 800027e:	717b      	strb	r3, [r7, #5]
		ready_to_drive = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8000280:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000284:	485e      	ldr	r0, [pc, #376]	; (8000400 <main+0x258>)
 8000286:	f002 f97f 	bl	8002588 <HAL_GPIO_ReadPin>
 800028a:	4603      	mov	r3, r0
 800028c:	713b      	strb	r3, [r7, #4]
		TxData[0] = tps2 & 0x00FF;
 800028e:	4b58      	ldr	r3, [pc, #352]	; (80003f0 <main+0x248>)
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	b2da      	uxtb	r2, r3
 8000294:	4b5c      	ldr	r3, [pc, #368]	; (8000408 <main+0x260>)
 8000296:	701a      	strb	r2, [r3, #0]
		TxData[1] = tps2 >> 8;
 8000298:	4b55      	ldr	r3, [pc, #340]	; (80003f0 <main+0x248>)
 800029a:	881b      	ldrh	r3, [r3, #0]
 800029c:	0a1b      	lsrs	r3, r3, #8
 800029e:	b29b      	uxth	r3, r3
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	4b59      	ldr	r3, [pc, #356]	; (8000408 <main+0x260>)
 80002a4:	705a      	strb	r2, [r3, #1]
		TxData[2] = tps1 & 0x00FF;
 80002a6:	4b51      	ldr	r3, [pc, #324]	; (80003ec <main+0x244>)
 80002a8:	881b      	ldrh	r3, [r3, #0]
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	4b56      	ldr	r3, [pc, #344]	; (8000408 <main+0x260>)
 80002ae:	709a      	strb	r2, [r3, #2]
		TxData[3] = tps1 >> 8;
 80002b0:	4b4e      	ldr	r3, [pc, #312]	; (80003ec <main+0x244>)
 80002b2:	881b      	ldrh	r3, [r3, #0]
 80002b4:	0a1b      	lsrs	r3, r3, #8
 80002b6:	b29b      	uxth	r3, r3
 80002b8:	b2da      	uxtb	r2, r3
 80002ba:	4b53      	ldr	r3, [pc, #332]	; (8000408 <main+0x260>)
 80002bc:	70da      	strb	r2, [r3, #3]
		TxData[4] = pressao1 & 0x00FF;
 80002be:	4b4d      	ldr	r3, [pc, #308]	; (80003f4 <main+0x24c>)
 80002c0:	881b      	ldrh	r3, [r3, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	4b50      	ldr	r3, [pc, #320]	; (8000408 <main+0x260>)
 80002c6:	711a      	strb	r2, [r3, #4]
		TxData[5] = pressao1 >> 8;
 80002c8:	4b4a      	ldr	r3, [pc, #296]	; (80003f4 <main+0x24c>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	0a1b      	lsrs	r3, r3, #8
 80002ce:	b29b      	uxth	r3, r3
 80002d0:	b2da      	uxtb	r2, r3
 80002d2:	4b4d      	ldr	r3, [pc, #308]	; (8000408 <main+0x260>)
 80002d4:	715a      	strb	r2, [r3, #5]
		if(tps1>=20)
 80002d6:	4b45      	ldr	r3, [pc, #276]	; (80003ec <main+0x244>)
 80002d8:	881b      	ldrh	r3, [r3, #0]
 80002da:	2b13      	cmp	r3, #19
 80002dc:	d907      	bls.n	80002ee <main+0x146>
		{
			TxData[6] |= (1 << 0);
 80002de:	4b4a      	ldr	r3, [pc, #296]	; (8000408 <main+0x260>)
 80002e0:	799b      	ldrb	r3, [r3, #6]
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	4b47      	ldr	r3, [pc, #284]	; (8000408 <main+0x260>)
 80002ea:	719a      	strb	r2, [r3, #6]
 80002ec:	e006      	b.n	80002fc <main+0x154>
		}
		else
		{
			TxData[6] &= ~(1 << 0);
 80002ee:	4b46      	ldr	r3, [pc, #280]	; (8000408 <main+0x260>)
 80002f0:	799b      	ldrb	r3, [r3, #6]
 80002f2:	f023 0301 	bic.w	r3, r3, #1
 80002f6:	b2da      	uxtb	r2, r3
 80002f8:	4b43      	ldr	r3, [pc, #268]	; (8000408 <main+0x260>)
 80002fa:	719a      	strb	r2, [r3, #6]
		}

		if(pressao1>=20)
 80002fc:	4b3d      	ldr	r3, [pc, #244]	; (80003f4 <main+0x24c>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	2b13      	cmp	r3, #19
 8000302:	d907      	bls.n	8000314 <main+0x16c>
		{
			TxData[6] |= (1 << 1);
 8000304:	4b40      	ldr	r3, [pc, #256]	; (8000408 <main+0x260>)
 8000306:	799b      	ldrb	r3, [r3, #6]
 8000308:	f043 0302 	orr.w	r3, r3, #2
 800030c:	b2da      	uxtb	r2, r3
 800030e:	4b3e      	ldr	r3, [pc, #248]	; (8000408 <main+0x260>)
 8000310:	719a      	strb	r2, [r3, #6]
 8000312:	e006      	b.n	8000322 <main+0x17a>
		}
		else
		{
			TxData[6] &= ~(1 << 1);
 8000314:	4b3c      	ldr	r3, [pc, #240]	; (8000408 <main+0x260>)
 8000316:	799b      	ldrb	r3, [r3, #6]
 8000318:	f023 0302 	bic.w	r3, r3, #2
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4b3a      	ldr	r3, [pc, #232]	; (8000408 <main+0x260>)
 8000320:	719a      	strb	r2, [r3, #6]
		}

		if(ready_to_drive)
 8000322:	793b      	ldrb	r3, [r7, #4]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d007      	beq.n	8000338 <main+0x190>
		{
			TxData[6] |= (1 << 2);
 8000328:	4b37      	ldr	r3, [pc, #220]	; (8000408 <main+0x260>)
 800032a:	799b      	ldrb	r3, [r3, #6]
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	b2da      	uxtb	r2, r3
 8000332:	4b35      	ldr	r3, [pc, #212]	; (8000408 <main+0x260>)
 8000334:	719a      	strb	r2, [r3, #6]
 8000336:	e006      	b.n	8000346 <main+0x19e>
		}
		else
		{
			TxData[6] &= ~(1 << 2);
 8000338:	4b33      	ldr	r3, [pc, #204]	; (8000408 <main+0x260>)
 800033a:	799b      	ldrb	r3, [r3, #6]
 800033c:	f023 0304 	bic.w	r3, r3, #4
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4b31      	ldr	r3, [pc, #196]	; (8000408 <main+0x260>)
 8000344:	719a      	strb	r2, [r3, #6]
		}


		TxData[7] = 0x0;
 8000346:	4b30      	ldr	r3, [pc, #192]	; (8000408 <main+0x260>)
 8000348:	2200      	movs	r2, #0
 800034a:	71da      	strb	r2, [r3, #7]

		TxData2[0] = inertia << 7 | bots << 6 | botao_shut << 5;
 800034c:	797b      	ldrb	r3, [r7, #5]
 800034e:	01db      	lsls	r3, r3, #7
 8000350:	b25a      	sxtb	r2, r3
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	019b      	lsls	r3, r3, #6
 8000356:	b25b      	sxtb	r3, r3
 8000358:	4313      	orrs	r3, r2
 800035a:	b25a      	sxtb	r2, r3
 800035c:	79bb      	ldrb	r3, [r7, #6]
 800035e:	015b      	lsls	r3, r3, #5
 8000360:	b25b      	sxtb	r3, r3
 8000362:	4313      	orrs	r3, r2
 8000364:	b25b      	sxtb	r3, r3
 8000366:	b2da      	uxtb	r2, r3
 8000368:	4b28      	ldr	r3, [pc, #160]	; (800040c <main+0x264>)
 800036a:	701a      	strb	r2, [r3, #0]
		TxData2[1] = 0xEF;
 800036c:	4b27      	ldr	r3, [pc, #156]	; (800040c <main+0x264>)
 800036e:	22ef      	movs	r2, #239	; 0xef
 8000370:	705a      	strb	r2, [r3, #1]
		TxData2[2] = pressao2 & 0x00FF;
 8000372:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <main+0x250>)
 8000374:	881b      	ldrh	r3, [r3, #0]
 8000376:	b2da      	uxtb	r2, r3
 8000378:	4b24      	ldr	r3, [pc, #144]	; (800040c <main+0x264>)
 800037a:	709a      	strb	r2, [r3, #2]
		TxData2[3] = pressao2 >> 8;
 800037c:	4b1e      	ldr	r3, [pc, #120]	; (80003f8 <main+0x250>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	0a1b      	lsrs	r3, r3, #8
 8000382:	b29b      	uxth	r3, r3
 8000384:	b2da      	uxtb	r2, r3
 8000386:	4b21      	ldr	r3, [pc, #132]	; (800040c <main+0x264>)
 8000388:	70da      	strb	r2, [r3, #3]
		TxData2[4] = pressao3 & 0x00FF;
 800038a:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <main+0x254>)
 800038c:	881b      	ldrh	r3, [r3, #0]
 800038e:	b2da      	uxtb	r2, r3
 8000390:	4b1e      	ldr	r3, [pc, #120]	; (800040c <main+0x264>)
 8000392:	711a      	strb	r2, [r3, #4]
		TxData2[5] = pressao3 >> 8;
 8000394:	4b19      	ldr	r3, [pc, #100]	; (80003fc <main+0x254>)
 8000396:	881b      	ldrh	r3, [r3, #0]
 8000398:	0a1b      	lsrs	r3, r3, #8
 800039a:	b29b      	uxth	r3, r3
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4b1b      	ldr	r3, [pc, #108]	; (800040c <main+0x264>)
 80003a0:	715a      	strb	r2, [r3, #5]
		TxData2[6] = encoder & 0x00FF;
 80003a2:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <main+0x268>)
 80003a4:	881b      	ldrh	r3, [r3, #0]
 80003a6:	b2da      	uxtb	r2, r3
 80003a8:	4b18      	ldr	r3, [pc, #96]	; (800040c <main+0x264>)
 80003aa:	719a      	strb	r2, [r3, #6]
		TxData2[7] = encoder >> 8;
 80003ac:	4b18      	ldr	r3, [pc, #96]	; (8000410 <main+0x268>)
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	0a1b      	lsrs	r3, r3, #8
 80003b2:	b29b      	uxth	r3, r3
 80003b4:	b2da      	uxtb	r2, r3
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <main+0x264>)
 80003b8:	71da      	strb	r2, [r3, #7]

		uint16_t erro = HAL_CAN_AddTxMessage(&hcan , &TxHeader , TxData , &mailbox);
 80003ba:	4b16      	ldr	r3, [pc, #88]	; (8000414 <main+0x26c>)
 80003bc:	4a12      	ldr	r2, [pc, #72]	; (8000408 <main+0x260>)
 80003be:	4909      	ldr	r1, [pc, #36]	; (80003e4 <main+0x23c>)
 80003c0:	4815      	ldr	r0, [pc, #84]	; (8000418 <main+0x270>)
 80003c2:	f001 fc15 	bl	8001bf0 <HAL_CAN_AddTxMessage>
 80003c6:	4603      	mov	r3, r0
 80003c8:	807b      	strh	r3, [r7, #2]
		uint16_t erro2 = HAL_CAN_AddTxMessage(&hcan , &TxHeader2 , TxData2 , &mailbox);
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <main+0x26c>)
 80003cc:	4a0f      	ldr	r2, [pc, #60]	; (800040c <main+0x264>)
 80003ce:	4906      	ldr	r1, [pc, #24]	; (80003e8 <main+0x240>)
 80003d0:	4811      	ldr	r0, [pc, #68]	; (8000418 <main+0x270>)
 80003d2:	f001 fc0d 	bl	8001bf0 <HAL_CAN_AddTxMessage>
 80003d6:	4603      	mov	r3, r0
 80003d8:	803b      	strh	r3, [r7, #0]
		if(erro || erro2)
		{

		}
		HAL_Delay(200);
 80003da:	20c8      	movs	r0, #200	; 0xc8
 80003dc:	f000 fca6 	bl	8000d2c <HAL_Delay>
	{
 80003e0:	e719      	b.n	8000216 <main+0x6e>
 80003e2:	bf00      	nop
 80003e4:	2000015c 	.word	0x2000015c
 80003e8:	20000174 	.word	0x20000174
 80003ec:	200001a0 	.word	0x200001a0
 80003f0:	200001a2 	.word	0x200001a2
 80003f4:	200001a4 	.word	0x200001a4
 80003f8:	200001a6 	.word	0x200001a6
 80003fc:	200001a8 	.word	0x200001a8
 8000400:	40010c00 	.word	0x40010c00
 8000404:	40010800 	.word	0x40010800
 8000408:	2000018c 	.word	0x2000018c
 800040c:	20000194 	.word	0x20000194
 8000410:	200001aa 	.word	0x200001aa
 8000414:	2000019c 	.word	0x2000019c
 8000418:	2000009c 	.word	0x2000009c

0800041c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b094      	sub	sp, #80	; 0x50
 8000420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000426:	2228      	movs	r2, #40	; 0x28
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f003 f9d6 	bl	80037dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000430:	f107 0314 	add.w	r3, r7, #20
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
 800043c:	60da      	str	r2, [r3, #12]
 800043e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800044c:	2301      	movs	r3, #1
 800044e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000450:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000454:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045a:	2301      	movs	r3, #1
 800045c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045e:	2302      	movs	r3, #2
 8000460:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000466:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000468:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800046c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000472:	4618      	mov	r0, r3
 8000474:	f002 f8b8 	bl	80025e8 <HAL_RCC_OscConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800047e:	f000 fa19 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000482:	230f      	movs	r3, #15
 8000484:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000486:	2302      	movs	r3, #2
 8000488:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800048e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000492:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000498:	f107 0314 	add.w	r3, r7, #20
 800049c:	2102      	movs	r1, #2
 800049e:	4618      	mov	r0, r3
 80004a0:	f002 fb24 	bl	8002aec <HAL_RCC_ClockConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004aa:	f000 fa03 	bl	80008b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004ae:	2302      	movs	r3, #2
 80004b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004b6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	4618      	mov	r0, r3
 80004bc:	f002 fcae 	bl	8002e1c <HAL_RCCEx_PeriphCLKConfig>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80004c6:	f000 f9f5 	bl	80008b4 <Error_Handler>
  }
}
 80004ca:	bf00      	nop
 80004cc:	3750      	adds	r7, #80	; 0x50
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
	...

080004d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004e4:	4b43      	ldr	r3, [pc, #268]	; (80005f4 <MX_ADC1_Init+0x120>)
 80004e6:	4a44      	ldr	r2, [pc, #272]	; (80005f8 <MX_ADC1_Init+0x124>)
 80004e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004ea:	4b42      	ldr	r3, [pc, #264]	; (80005f4 <MX_ADC1_Init+0x120>)
 80004ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f2:	4b40      	ldr	r3, [pc, #256]	; (80005f4 <MX_ADC1_Init+0x120>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f8:	4b3e      	ldr	r3, [pc, #248]	; (80005f4 <MX_ADC1_Init+0x120>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80004fe:	4b3d      	ldr	r3, [pc, #244]	; (80005f4 <MX_ADC1_Init+0x120>)
 8000500:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000504:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000506:	4b3b      	ldr	r3, [pc, #236]	; (80005f4 <MX_ADC1_Init+0x120>)
 8000508:	2200      	movs	r2, #0
 800050a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 800050c:	4b39      	ldr	r3, [pc, #228]	; (80005f4 <MX_ADC1_Init+0x120>)
 800050e:	2208      	movs	r2, #8
 8000510:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000512:	4838      	ldr	r0, [pc, #224]	; (80005f4 <MX_ADC1_Init+0x120>)
 8000514:	f000 fc2e 	bl	8000d74 <HAL_ADC_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800051e:	f000 f9c9 	bl	80008b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000526:	2301      	movs	r3, #1
 8000528:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	4619      	mov	r1, r3
 8000532:	4830      	ldr	r0, [pc, #192]	; (80005f4 <MX_ADC1_Init+0x120>)
 8000534:	f000 ffb8 	bl	80014a8 <HAL_ADC_ConfigChannel>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800053e:	f000 f9b9 	bl	80008b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000542:	2302      	movs	r3, #2
 8000544:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	4619      	mov	r1, r3
 800054a:	482a      	ldr	r0, [pc, #168]	; (80005f4 <MX_ADC1_Init+0x120>)
 800054c:	f000 ffac 	bl	80014a8 <HAL_ADC_ConfigChannel>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000556:	f000 f9ad 	bl	80008b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800055a:	2303      	movs	r3, #3
 800055c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	4619      	mov	r1, r3
 8000562:	4824      	ldr	r0, [pc, #144]	; (80005f4 <MX_ADC1_Init+0x120>)
 8000564:	f000 ffa0 	bl	80014a8 <HAL_ADC_ConfigChannel>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800056e:	f000 f9a1 	bl	80008b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000572:	2304      	movs	r3, #4
 8000574:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	4619      	mov	r1, r3
 800057a:	481e      	ldr	r0, [pc, #120]	; (80005f4 <MX_ADC1_Init+0x120>)
 800057c:	f000 ff94 	bl	80014a8 <HAL_ADC_ConfigChannel>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000586:	f000 f995 	bl	80008b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800058a:	2305      	movs	r3, #5
 800058c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	4619      	mov	r1, r3
 8000592:	4818      	ldr	r0, [pc, #96]	; (80005f4 <MX_ADC1_Init+0x120>)
 8000594:	f000 ff88 	bl	80014a8 <HAL_ADC_ConfigChannel>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800059e:	f000 f989 	bl	80008b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80005a2:	2306      	movs	r3, #6
 80005a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	4619      	mov	r1, r3
 80005aa:	4812      	ldr	r0, [pc, #72]	; (80005f4 <MX_ADC1_Init+0x120>)
 80005ac:	f000 ff7c 	bl	80014a8 <HAL_ADC_ConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80005b6:	f000 f97d 	bl	80008b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80005ba:	2307      	movs	r3, #7
 80005bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4619      	mov	r1, r3
 80005c2:	480c      	ldr	r0, [pc, #48]	; (80005f4 <MX_ADC1_Init+0x120>)
 80005c4:	f000 ff70 	bl	80014a8 <HAL_ADC_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80005ce:	f000 f971 	bl	80008b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80005d2:	2308      	movs	r3, #8
 80005d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	4619      	mov	r1, r3
 80005da:	4806      	ldr	r0, [pc, #24]	; (80005f4 <MX_ADC1_Init+0x120>)
 80005dc:	f000 ff64 	bl	80014a8 <HAL_ADC_ConfigChannel>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80005e6:	f000 f965 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000028 	.word	0x20000028
 80005f8:	40012400 	.word	0x40012400

080005fc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	; 0x28
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000602:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <MX_CAN_Init+0xb8>)
 8000604:	4a2c      	ldr	r2, [pc, #176]	; (80006b8 <MX_CAN_Init+0xbc>)
 8000606:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000608:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <MX_CAN_Init+0xb8>)
 800060a:	2204      	movs	r2, #4
 800060c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800060e:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <MX_CAN_Init+0xb8>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <MX_CAN_Init+0xb8>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800061a:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <MX_CAN_Init+0xb8>)
 800061c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000620:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000622:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <MX_CAN_Init+0xb8>)
 8000624:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000628:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <MX_CAN_Init+0xb8>)
 800062c:	2200      	movs	r2, #0
 800062e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000630:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <MX_CAN_Init+0xb8>)
 8000632:	2200      	movs	r2, #0
 8000634:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <MX_CAN_Init+0xb8>)
 8000638:	2200      	movs	r2, #0
 800063a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800063c:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <MX_CAN_Init+0xb8>)
 800063e:	2200      	movs	r2, #0
 8000640:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <MX_CAN_Init+0xb8>)
 8000644:	2200      	movs	r2, #0
 8000646:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000648:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_CAN_Init+0xb8>)
 800064a:	2200      	movs	r2, #0
 800064c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800064e:	4819      	ldr	r0, [pc, #100]	; (80006b4 <MX_CAN_Init+0xb8>)
 8000650:	f001 f8c6 	bl	80017e0 <HAL_CAN_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800065a:	f000 f92b 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterIdHigh = 0x0;
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0;
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterBank = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800067a:	2301      	movs	r3, #1
 800067c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 800067e:	2301      	movs	r3, #1
 8000680:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000682:	230e      	movs	r3, #14
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
	if(HAL_CAN_ConfigFilter(&hcan , &sFilterConfig) != HAL_OK)
 8000686:	463b      	mov	r3, r7
 8000688:	4619      	mov	r1, r3
 800068a:	480a      	ldr	r0, [pc, #40]	; (80006b4 <MX_CAN_Init+0xb8>)
 800068c:	f001 f9a3 	bl	80019d6 <HAL_CAN_ConfigFilter>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_CAN_Init+0x9e>
	{
	  Error_Handler();
 8000696:	f000 f90d 	bl	80008b4 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan) != HAL_OK)
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <MX_CAN_Init+0xb8>)
 800069c:	f001 fa64 	bl	8001b68 <HAL_CAN_Start>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_CAN_Init+0xae>
	{
	  Error_Handler();
 80006a6:	f000 f905 	bl	80008b4 <Error_Handler>
	}
  /* USER CODE END CAN_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000009c 	.word	0x2000009c
 80006b8:	40006400 	.word	0x40006400

080006bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d0:	463b      	mov	r3, r7
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_TIM3_Init+0x94>)
 80006da:	4a1e      	ldr	r2, [pc, #120]	; (8000754 <MX_TIM3_Init+0x98>)
 80006dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <MX_TIM3_Init+0x94>)
 80006e0:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80006e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_TIM3_Init+0x94>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_TIM3_Init+0x94>)
 80006ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f4:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_TIM3_Init+0x94>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_TIM3_Init+0x94>)
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000700:	4813      	ldr	r0, [pc, #76]	; (8000750 <MX_TIM3_Init+0x94>)
 8000702:	f002 fd01 	bl	8003108 <HAL_TIM_Base_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800070c:	f000 f8d2 	bl	80008b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000714:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	4619      	mov	r1, r3
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <MX_TIM3_Init+0x94>)
 800071e:	f002 fd42 	bl	80031a6 <HAL_TIM_ConfigClockSource>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000728:	f000 f8c4 	bl	80008b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800072c:	2320      	movs	r3, #32
 800072e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	4619      	mov	r1, r3
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_TIM3_Init+0x94>)
 800073a:	f002 fef1 	bl	8003520 <HAL_TIMEx_MasterConfigSynchronization>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000744:	f000 f8b6 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200000c4 	.word	0x200000c4
 8000754:	40000400 	.word	0x40000400

08000758 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_USART1_UART_Init+0x4c>)
 800075e:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <MX_USART1_UART_Init+0x50>)
 8000760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_USART1_UART_Init+0x4c>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_USART1_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_USART1_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_USART1_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_USART1_UART_Init+0x4c>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_USART1_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_USART1_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_USART1_UART_Init+0x4c>)
 8000790:	f002 ff24 	bl	80035dc <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800079a:	f000 f88b 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000010c 	.word	0x2000010c
 80007a8:	40013800 	.word	0x40013800

080007ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_DMA_Init+0x38>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <MX_DMA_Init+0x38>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_DMA_Init+0x38>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	200b      	movs	r0, #11
 80007d0:	f001 fbbf 	bl	8001f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007d4:	200b      	movs	r0, #11
 80007d6:	f001 fbd8 	bl	8001f8a <HAL_NVIC_EnableIRQ>

}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fc:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <MX_GPIO_Init+0xc0>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a29      	ldr	r2, [pc, #164]	; (80008a8 <MX_GPIO_Init+0xc0>)
 8000802:	f043 0310 	orr.w	r3, r3, #16
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <MX_GPIO_Init+0xc0>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f003 0310 	and.w	r3, r3, #16
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <MX_GPIO_Init+0xc0>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a23      	ldr	r2, [pc, #140]	; (80008a8 <MX_GPIO_Init+0xc0>)
 800081a:	f043 0320 	orr.w	r3, r3, #32
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_GPIO_Init+0xc0>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0320 	and.w	r3, r3, #32
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_GPIO_Init+0xc0>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a1d      	ldr	r2, [pc, #116]	; (80008a8 <MX_GPIO_Init+0xc0>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_GPIO_Init+0xc0>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_GPIO_Init+0xc0>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <MX_GPIO_Init+0xc0>)
 800084a:	f043 0308 	orr.w	r3, r3, #8
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_GPIO_Init+0xc0>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0308 	and.w	r3, r3, #8
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000862:	4812      	ldr	r0, [pc, #72]	; (80008ac <MX_GPIO_Init+0xc4>)
 8000864:	f001 fea7 	bl	80025b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2302      	movs	r3, #2
 8000878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	4619      	mov	r1, r3
 8000880:	480a      	ldr	r0, [pc, #40]	; (80008ac <MX_GPIO_Init+0xc4>)
 8000882:	f001 fcfd 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000886:	f640 43c3 	movw	r3, #3267	; 0xcc3
 800088a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000890:	2302      	movs	r3, #2
 8000892:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4619      	mov	r1, r3
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_GPIO_Init+0xc8>)
 800089c:	f001 fcf0 	bl	8002280 <HAL_GPIO_Init>

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40011000 	.word	0x40011000
 80008b0:	40010c00 	.word	0x40010c00

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_MspInit+0x5c>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	4a14      	ldr	r2, [pc, #80]	; (800091c <HAL_MspInit+0x5c>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6193      	str	r3, [r2, #24]
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_MspInit+0x5c>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_MspInit+0x5c>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <HAL_MspInit+0x5c>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_MspInit+0x5c>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <HAL_MspInit+0x60>)
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <HAL_MspInit+0x60>)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	40021000 	.word	0x40021000
 8000920:	40010000 	.word	0x40010000

08000924 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a2c      	ldr	r2, [pc, #176]	; (80009f0 <HAL_ADC_MspInit+0xcc>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d151      	bne.n	80009e8 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000944:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <HAL_ADC_MspInit+0xd0>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a2a      	ldr	r2, [pc, #168]	; (80009f4 <HAL_ADC_MspInit+0xd0>)
 800094a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <HAL_ADC_MspInit+0xd0>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <HAL_ADC_MspInit+0xd0>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a24      	ldr	r2, [pc, #144]	; (80009f4 <HAL_ADC_MspInit+0xd0>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <HAL_ADC_MspInit+0xd0>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000974:	23ff      	movs	r3, #255	; 0xff
 8000976:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000978:	2303      	movs	r3, #3
 800097a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	4619      	mov	r1, r3
 8000982:	481d      	ldr	r0, [pc, #116]	; (80009f8 <HAL_ADC_MspInit+0xd4>)
 8000984:	f001 fc7c 	bl	8002280 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 800098a:	4a1d      	ldr	r2, [pc, #116]	; (8000a00 <HAL_ADC_MspInit+0xdc>)
 800098c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 800099c:	2280      	movs	r2, #128	; 0x80
 800099e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 80009a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 80009aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009bc:	480f      	ldr	r0, [pc, #60]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 80009be:	f001 faff 	bl	8001fc0 <HAL_DMA_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80009c8:	f7ff ff74 	bl	80008b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 80009d0:	621a      	str	r2, [r3, #32]
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2012      	movs	r0, #18
 80009de:	f001 fab8 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80009e2:	2012      	movs	r0, #18
 80009e4:	f001 fad1 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40012400 	.word	0x40012400
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40010800 	.word	0x40010800
 80009fc:	20000058 	.word	0x20000058
 8000a00:	40020008 	.word	0x40020008

08000a04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a25      	ldr	r2, [pc, #148]	; (8000ab4 <HAL_CAN_MspInit+0xb0>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d143      	bne.n	8000aac <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a24:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <HAL_CAN_MspInit+0xb4>)
 8000a26:	69db      	ldr	r3, [r3, #28]
 8000a28:	4a23      	ldr	r2, [pc, #140]	; (8000ab8 <HAL_CAN_MspInit+0xb4>)
 8000a2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a2e:	61d3      	str	r3, [r2, #28]
 8000a30:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <HAL_CAN_MspInit+0xb4>)
 8000a32:	69db      	ldr	r3, [r3, #28]
 8000a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <HAL_CAN_MspInit+0xb4>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <HAL_CAN_MspInit+0xb4>)
 8000a42:	f043 0308 	orr.w	r3, r3, #8
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <HAL_CAN_MspInit+0xb4>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0308 	and.w	r3, r3, #8
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	4814      	ldr	r0, [pc, #80]	; (8000abc <HAL_CAN_MspInit+0xb8>)
 8000a6a:	f001 fc09 	bl	8002280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	480e      	ldr	r0, [pc, #56]	; (8000abc <HAL_CAN_MspInit+0xb8>)
 8000a84:	f001 fbfc 	bl	8002280 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000a88:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <HAL_CAN_MspInit+0xbc>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a90:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8000aa6:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_CAN_MspInit+0xbc>)
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aaa:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	; 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40006400 	.word	0x40006400
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010c00 	.word	0x40010c00
 8000ac0:	40010000 	.word	0x40010000

08000ac4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a09      	ldr	r2, [pc, #36]	; (8000af8 <HAL_TIM_Base_MspInit+0x34>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d10b      	bne.n	8000aee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_TIM_Base_MspInit+0x38>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_TIM_Base_MspInit+0x38>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_TIM_Base_MspInit+0x38>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	40000400 	.word	0x40000400
 8000afc:	40021000 	.word	0x40021000

08000b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a1c      	ldr	r2, [pc, #112]	; (8000b8c <HAL_UART_MspInit+0x8c>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d131      	bne.n	8000b84 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <HAL_UART_MspInit+0x90>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a1a      	ldr	r2, [pc, #104]	; (8000b90 <HAL_UART_MspInit+0x90>)
 8000b26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <HAL_UART_MspInit+0x90>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_UART_MspInit+0x90>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <HAL_UART_MspInit+0x90>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_UART_MspInit+0x90>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	4619      	mov	r1, r3
 8000b64:	480b      	ldr	r0, [pc, #44]	; (8000b94 <HAL_UART_MspInit+0x94>)
 8000b66:	f001 fb8b 	bl	8002280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <HAL_UART_MspInit+0x94>)
 8000b80:	f001 fb7e 	bl	8002280 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b84:	bf00      	nop
 8000b86:	3720      	adds	r7, #32
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40013800 	.word	0x40013800
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40010800 	.word	0x40010800

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr

08000bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bde:	f000 f889 	bl	8000cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <DMA1_Channel1_IRQHandler+0x10>)
 8000bee:	f001 fa41 	bl	8002074 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000058 	.word	0x20000058

08000bfc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <ADC1_2_IRQHandler+0x10>)
 8000c02:	f000 fb7b 	bl	80012fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000028 	.word	0x20000028

08000c10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c1e:	490d      	ldr	r1, [pc, #52]	; (8000c54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c34:	4c0a      	ldr	r4, [pc, #40]	; (8000c60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c42:	f7ff ffe5 	bl	8000c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c46:	f002 fda5 	bl	8003794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c4a:	f7ff faad 	bl	80001a8 <main>
  bx lr
 8000c4e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c58:	08003844 	.word	0x08003844
  ldr r2, =_sbss
 8000c5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c60:	200001b0 	.word	0x200001b0

08000c64 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <CAN1_RX1_IRQHandler>
	...

08000c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_Init+0x28>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_Init+0x28>)
 8000c72:	f043 0310 	orr.w	r3, r3, #16
 8000c76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f001 f95f 	bl	8001f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7e:	200f      	movs	r0, #15
 8000c80:	f000 f808 	bl	8000c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c84:	f7ff fe1c 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40022000 	.word	0x40022000

08000c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_InitTick+0x54>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_InitTick+0x58>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 f977 	bl	8001fa6 <HAL_SYSTICK_Config>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00e      	b.n	8000ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b0f      	cmp	r3, #15
 8000cc6:	d80a      	bhi.n	8000cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f001 f93f 	bl	8001f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd4:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <HAL_InitTick+0x5c>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e000      	b.n	8000ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000004 	.word	0x20000004

08000cf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_IncTick+0x1c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <HAL_IncTick+0x20>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	4a03      	ldr	r2, [pc, #12]	; (8000d14 <HAL_IncTick+0x20>)
 8000d06:	6013      	str	r3, [r2, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	20000008 	.word	0x20000008
 8000d14:	200001ac 	.word	0x200001ac

08000d18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b02      	ldr	r3, [pc, #8]	; (8000d28 <HAL_GetTick+0x10>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	200001ac 	.word	0x200001ac

08000d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff fff0 	bl	8000d18 <HAL_GetTick>
 8000d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	d005      	beq.n	8000d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_Delay+0x44>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d52:	bf00      	nop
 8000d54:	f7ff ffe0 	bl	8000d18 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8f7      	bhi.n	8000d54 <HAL_Delay+0x28>
  {
  }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008

08000d74 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e0be      	b.n	8000f14 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d109      	bne.n	8000db8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff fdb6 	bl	8000924 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f000 fcc7 	bl	800174c <ADC_ConversionStop_Disable>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc6:	f003 0310 	and.w	r3, r3, #16
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f040 8099 	bne.w	8000f02 <HAL_ADC_Init+0x18e>
 8000dd0:	7dfb      	ldrb	r3, [r7, #23]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 8095 	bne.w	8000f02 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ddc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000de0:	f023 0302 	bic.w	r3, r3, #2
 8000de4:	f043 0202 	orr.w	r2, r3, #2
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000df4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7b1b      	ldrb	r3, [r3, #12]
 8000dfa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000dfc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e0c:	d003      	beq.n	8000e16 <HAL_ADC_Init+0xa2>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d102      	bne.n	8000e1c <HAL_ADC_Init+0xa8>
 8000e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e1a:	e000      	b.n	8000e1e <HAL_ADC_Init+0xaa>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	7d1b      	ldrb	r3, [r3, #20]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d119      	bne.n	8000e60 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7b1b      	ldrb	r3, [r3, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d109      	bne.n	8000e48 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	035a      	lsls	r2, r3, #13
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	e00b      	b.n	8000e60 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4c:	f043 0220 	orr.w	r2, r3, #32
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e58:	f043 0201 	orr.w	r2, r3, #1
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <HAL_ADC_Init+0x1a8>)
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	6812      	ldr	r2, [r2, #0]
 8000e82:	68b9      	ldr	r1, [r7, #8]
 8000e84:	430b      	orrs	r3, r1
 8000e86:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e90:	d003      	beq.n	8000e9a <HAL_ADC_Init+0x126>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d104      	bne.n	8000ea4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	051b      	lsls	r3, r3, #20
 8000ea2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eaa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_ADC_Init+0x1ac>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d10b      	bne.n	8000ee0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed2:	f023 0303 	bic.w	r3, r3, #3
 8000ed6:	f043 0201 	orr.w	r2, r3, #1
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ede:	e018      	b.n	8000f12 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee4:	f023 0312 	bic.w	r3, r3, #18
 8000ee8:	f043 0210 	orr.w	r2, r3, #16
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef4:	f043 0201 	orr.w	r2, r3, #1
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f00:	e007      	b.n	8000f12 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f06:	f043 0210 	orr.w	r2, r3, #16
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	ffe1f7fd 	.word	0xffe1f7fd
 8000f20:	ff1f0efe 	.word	0xff1f0efe

08000f24 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d101      	bne.n	8000f3e <HAL_ADC_Start+0x1a>
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	e098      	b.n	8001070 <HAL_ADC_Start+0x14c>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2201      	movs	r2, #1
 8000f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 fba6 	bl	8001698 <ADC_Enable>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f040 8087 	bne.w	8001066 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a41      	ldr	r2, [pc, #260]	; (8001078 <HAL_ADC_Start+0x154>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d105      	bne.n	8000f82 <HAL_ADC_Start+0x5e>
 8000f76:	4b41      	ldr	r3, [pc, #260]	; (800107c <HAL_ADC_Start+0x158>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d115      	bne.n	8000fae <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d026      	beq.n	8000fea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fa4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fac:	e01d      	b.n	8000fea <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a2f      	ldr	r2, [pc, #188]	; (800107c <HAL_ADC_Start+0x158>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d004      	beq.n	8000fce <HAL_ADC_Start+0xaa>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a2b      	ldr	r2, [pc, #172]	; (8001078 <HAL_ADC_Start+0x154>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10d      	bne.n	8000fea <HAL_ADC_Start+0xc6>
 8000fce:	4b2b      	ldr	r3, [pc, #172]	; (800107c <HAL_ADC_Start+0x158>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d007      	beq.n	8000fea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fe2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d006      	beq.n	8001004 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffa:	f023 0206 	bic.w	r2, r3, #6
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	62da      	str	r2, [r3, #44]	; 0x2c
 8001002:	e002      	b.n	800100a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f06f 0202 	mvn.w	r2, #2
 800101a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001026:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800102a:	d113      	bne.n	8001054 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001030:	4a11      	ldr	r2, [pc, #68]	; (8001078 <HAL_ADC_Start+0x154>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d105      	bne.n	8001042 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_ADC_Start+0x158>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800103e:	2b00      	cmp	r3, #0
 8001040:	d108      	bne.n	8001054 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	e00c      	b.n	800106e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	e003      	b.n	800106e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40012800 	.word	0x40012800
 800107c:	40012400 	.word	0x40012400

08001080 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001092:	2b01      	cmp	r3, #1
 8001094:	d101      	bne.n	800109a <HAL_ADC_Stop+0x1a>
 8001096:	2302      	movs	r3, #2
 8001098:	e01a      	b.n	80010d0 <HAL_ADC_Stop+0x50>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fb52 	bl	800174c <ADC_ConversionStop_Disable>
 80010a8:	4603      	mov	r3, r0
 80010aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d109      	bne.n	80010c6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010ba:	f023 0301 	bic.w	r3, r3, #1
 80010be:	f043 0201 	orr.w	r2, r3, #1
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b087      	sub	sp, #28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80010ee:	f7ff fe13 	bl	8000d18 <HAL_GetTick>
 80010f2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00b      	beq.n	800111a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001106:	f043 0220 	orr.w	r2, r3, #32
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e0d3      	b.n	80012c2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001124:	2b00      	cmp	r3, #0
 8001126:	d131      	bne.n	800118c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001132:	2b00      	cmp	r3, #0
 8001134:	d12a      	bne.n	800118c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001136:	e021      	b.n	800117c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113e:	d01d      	beq.n	800117c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d007      	beq.n	8001156 <HAL_ADC_PollForConversion+0x7e>
 8001146:	f7ff fde7 	bl	8000d18 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d212      	bcs.n	800117c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10b      	bne.n	800117c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001168:	f043 0204 	orr.w	r2, r3, #4
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e0a2      	b.n	80012c2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0d6      	beq.n	8001138 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800118a:	e070      	b.n	800126e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800118c:	4b4f      	ldr	r3, [pc, #316]	; (80012cc <HAL_ADC_PollForConversion+0x1f4>)
 800118e:	681c      	ldr	r4, [r3, #0]
 8001190:	2002      	movs	r0, #2
 8001192:	f001 fef9 	bl	8002f88 <HAL_RCCEx_GetPeriphCLKFreq>
 8001196:	4603      	mov	r3, r0
 8001198:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6919      	ldr	r1, [r3, #16]
 80011a2:	4b4b      	ldr	r3, [pc, #300]	; (80012d0 <HAL_ADC_PollForConversion+0x1f8>)
 80011a4:	400b      	ands	r3, r1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d118      	bne.n	80011dc <HAL_ADC_PollForConversion+0x104>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68d9      	ldr	r1, [r3, #12]
 80011b0:	4b48      	ldr	r3, [pc, #288]	; (80012d4 <HAL_ADC_PollForConversion+0x1fc>)
 80011b2:	400b      	ands	r3, r1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d111      	bne.n	80011dc <HAL_ADC_PollForConversion+0x104>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6919      	ldr	r1, [r3, #16]
 80011be:	4b46      	ldr	r3, [pc, #280]	; (80012d8 <HAL_ADC_PollForConversion+0x200>)
 80011c0:	400b      	ands	r3, r1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d108      	bne.n	80011d8 <HAL_ADC_PollForConversion+0x100>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68d9      	ldr	r1, [r3, #12]
 80011cc:	4b43      	ldr	r3, [pc, #268]	; (80012dc <HAL_ADC_PollForConversion+0x204>)
 80011ce:	400b      	ands	r3, r1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_ADC_PollForConversion+0x100>
 80011d4:	2314      	movs	r3, #20
 80011d6:	e020      	b.n	800121a <HAL_ADC_PollForConversion+0x142>
 80011d8:	2329      	movs	r3, #41	; 0x29
 80011da:	e01e      	b.n	800121a <HAL_ADC_PollForConversion+0x142>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6919      	ldr	r1, [r3, #16]
 80011e2:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <HAL_ADC_PollForConversion+0x200>)
 80011e4:	400b      	ands	r3, r1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d106      	bne.n	80011f8 <HAL_ADC_PollForConversion+0x120>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68d9      	ldr	r1, [r3, #12]
 80011f0:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <HAL_ADC_PollForConversion+0x204>)
 80011f2:	400b      	ands	r3, r1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00d      	beq.n	8001214 <HAL_ADC_PollForConversion+0x13c>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6919      	ldr	r1, [r3, #16]
 80011fe:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <HAL_ADC_PollForConversion+0x208>)
 8001200:	400b      	ands	r3, r1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d108      	bne.n	8001218 <HAL_ADC_PollForConversion+0x140>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68d9      	ldr	r1, [r3, #12]
 800120c:	4b34      	ldr	r3, [pc, #208]	; (80012e0 <HAL_ADC_PollForConversion+0x208>)
 800120e:	400b      	ands	r3, r1
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <HAL_ADC_PollForConversion+0x140>
 8001214:	2354      	movs	r3, #84	; 0x54
 8001216:	e000      	b.n	800121a <HAL_ADC_PollForConversion+0x142>
 8001218:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800121a:	fb02 f303 	mul.w	r3, r2, r3
 800121e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001220:	e021      	b.n	8001266 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001228:	d01a      	beq.n	8001260 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d007      	beq.n	8001240 <HAL_ADC_PollForConversion+0x168>
 8001230:	f7ff fd72 	bl	8000d18 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d20f      	bcs.n	8001260 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	429a      	cmp	r2, r3
 8001246:	d90b      	bls.n	8001260 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124c:	f043 0204 	orr.w	r2, r3, #4
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e030      	b.n	80012c2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	3301      	adds	r3, #1
 8001264:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	429a      	cmp	r2, r3
 800126c:	d8d9      	bhi.n	8001222 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f06f 0212 	mvn.w	r2, #18
 8001276:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800128e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001292:	d115      	bne.n	80012c0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001298:	2b00      	cmp	r3, #0
 800129a:	d111      	bne.n	80012c0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d105      	bne.n	80012c0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	f043 0201 	orr.w	r2, r3, #1
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	371c      	adds	r7, #28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd90      	pop	{r4, r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000000 	.word	0x20000000
 80012d0:	24924924 	.word	0x24924924
 80012d4:	00924924 	.word	0x00924924
 80012d8:	12492492 	.word	0x12492492
 80012dc:	00492492 	.word	0x00492492
 80012e0:	00249249 	.word	0x00249249

080012e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0320 	and.w	r3, r3, #32
 800130e:	2b20      	cmp	r3, #32
 8001310:	d140      	bne.n	8001394 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b02      	cmp	r3, #2
 800131e:	d139      	bne.n	8001394 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001324:	f003 0310 	and.w	r3, r3, #16
 8001328:	2b00      	cmp	r3, #0
 800132a:	d105      	bne.n	8001338 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001342:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001346:	d11d      	bne.n	8001384 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800134c:	2b00      	cmp	r3, #0
 800134e:	d119      	bne.n	8001384 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0220 	bic.w	r2, r2, #32
 800135e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d105      	bne.n	8001384 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	f043 0201 	orr.w	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f87c 	bl	8001482 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f06f 0212 	mvn.w	r2, #18
 8001392:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	2b80      	cmp	r3, #128	; 0x80
 80013a0:	d14f      	bne.n	8001442 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d148      	bne.n	8001442 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d105      	bne.n	80013c8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80013d2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80013d6:	d012      	beq.n	80013fe <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d125      	bne.n	8001432 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80013f0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013f4:	d11d      	bne.n	8001432 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d119      	bne.n	8001432 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800140c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001412:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001422:	2b00      	cmp	r3, #0
 8001424:	d105      	bne.n	8001432 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142a:	f043 0201 	orr.w	r2, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f9cb 	bl	80017ce <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f06f 020c 	mvn.w	r2, #12
 8001440:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800144c:	2b40      	cmp	r3, #64	; 0x40
 800144e:	d114      	bne.n	800147a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d10d      	bne.n	800147a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001462:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f812 	bl	8001494 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f06f 0201 	mvn.w	r2, #1
 8001478:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x20>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e0dc      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1da>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b06      	cmp	r3, #6
 80014d6:	d81c      	bhi.n	8001512 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	3b05      	subs	r3, #5
 80014ea:	221f      	movs	r2, #31
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	4019      	ands	r1, r3
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b05      	subs	r3, #5
 8001504:	fa00 f203 	lsl.w	r2, r0, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	635a      	str	r2, [r3, #52]	; 0x34
 8001510:	e03c      	b.n	800158c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b0c      	cmp	r3, #12
 8001518:	d81c      	bhi.n	8001554 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	3b23      	subs	r3, #35	; 0x23
 800152c:	221f      	movs	r2, #31
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	4019      	ands	r1, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	3b23      	subs	r3, #35	; 0x23
 8001546:	fa00 f203 	lsl.w	r2, r0, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	631a      	str	r2, [r3, #48]	; 0x30
 8001552:	e01b      	b.n	800158c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	3b41      	subs	r3, #65	; 0x41
 8001566:	221f      	movs	r2, #31
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	4019      	ands	r1, r3
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	3b41      	subs	r3, #65	; 0x41
 8001580:	fa00 f203 	lsl.w	r2, r0, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b09      	cmp	r3, #9
 8001592:	d91c      	bls.n	80015ce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68d9      	ldr	r1, [r3, #12]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	3b1e      	subs	r3, #30
 80015a6:	2207      	movs	r2, #7
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	4019      	ands	r1, r3
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	6898      	ldr	r0, [r3, #8]
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	3b1e      	subs	r3, #30
 80015c0:	fa00 f203 	lsl.w	r2, r0, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	e019      	b.n	8001602 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6919      	ldr	r1, [r3, #16]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	2207      	movs	r2, #7
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	4019      	ands	r1, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	6898      	ldr	r0, [r3, #8]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	fa00 f203 	lsl.w	r2, r0, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b10      	cmp	r3, #16
 8001608:	d003      	beq.n	8001612 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800160e:	2b11      	cmp	r3, #17
 8001610:	d132      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a1d      	ldr	r2, [pc, #116]	; (800168c <HAL_ADC_ConfigChannel+0x1e4>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d125      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d126      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001638:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b10      	cmp	r3, #16
 8001640:	d11a      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_ADC_ConfigChannel+0x1e8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a13      	ldr	r2, [pc, #76]	; (8001694 <HAL_ADC_ConfigChannel+0x1ec>)
 8001648:	fba2 2303 	umull	r2, r3, r2, r3
 800164c:	0c9a      	lsrs	r2, r3, #18
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001658:	e002      	b.n	8001660 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	3b01      	subs	r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f9      	bne.n	800165a <HAL_ADC_ConfigChannel+0x1b2>
 8001666:	e007      	b.n	8001678 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	f043 0220 	orr.w	r2, r3, #32
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	40012400 	.word	0x40012400
 8001690:	20000000 	.word	0x20000000
 8001694:	431bde83 	.word	0x431bde83

08001698 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d040      	beq.n	8001738 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 0201 	orr.w	r2, r2, #1
 80016c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <ADC_Enable+0xac>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a1f      	ldr	r2, [pc, #124]	; (8001748 <ADC_Enable+0xb0>)
 80016cc:	fba2 2303 	umull	r2, r3, r2, r3
 80016d0:	0c9b      	lsrs	r3, r3, #18
 80016d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016d4:	e002      	b.n	80016dc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3b01      	subs	r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f9      	bne.n	80016d6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016e2:	f7ff fb19 	bl	8000d18 <HAL_GetTick>
 80016e6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016e8:	e01f      	b.n	800172a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016ea:	f7ff fb15 	bl	8000d18 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d918      	bls.n	800172a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b01      	cmp	r3, #1
 8001704:	d011      	beq.n	800172a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	f043 0210 	orr.w	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001716:	f043 0201 	orr.w	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e007      	b.n	800173a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b01      	cmp	r3, #1
 8001736:	d1d8      	bne.n	80016ea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000000 	.word	0x20000000
 8001748:	431bde83 	.word	0x431bde83

0800174c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b01      	cmp	r3, #1
 8001764:	d12e      	bne.n	80017c4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0201 	bic.w	r2, r2, #1
 8001774:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001776:	f7ff facf 	bl	8000d18 <HAL_GetTick>
 800177a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800177c:	e01b      	b.n	80017b6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800177e:	f7ff facb 	bl	8000d18 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d914      	bls.n	80017b6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b01      	cmp	r3, #1
 8001798:	d10d      	bne.n	80017b6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	f043 0210 	orr.w	r2, r3, #16
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e007      	b.n	80017c6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d0dc      	beq.n	800177e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0ed      	b.n	80019ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff f900 	bl	8000a04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001814:	f7ff fa80 	bl	8000d18 <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800181a:	e012      	b.n	8001842 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800181c:	f7ff fa7c 	bl	8000d18 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b0a      	cmp	r3, #10
 8001828:	d90b      	bls.n	8001842 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2205      	movs	r2, #5
 800183a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e0c5      	b.n	80019ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0e5      	beq.n	800181c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0202 	bic.w	r2, r2, #2
 800185e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001860:	f7ff fa5a 	bl	8000d18 <HAL_GetTick>
 8001864:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001866:	e012      	b.n	800188e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001868:	f7ff fa56 	bl	8000d18 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b0a      	cmp	r3, #10
 8001874:	d90b      	bls.n	800188e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2205      	movs	r2, #5
 8001886:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e09f      	b.n	80019ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1e5      	bne.n	8001868 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7e1b      	ldrb	r3, [r3, #24]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d108      	bne.n	80018b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e007      	b.n	80018c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7e5b      	ldrb	r3, [r3, #25]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d108      	bne.n	80018e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e007      	b.n	80018f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7e9b      	ldrb	r3, [r3, #26]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d108      	bne.n	800190a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0220 	orr.w	r2, r2, #32
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e007      	b.n	800191a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0220 	bic.w	r2, r2, #32
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7edb      	ldrb	r3, [r3, #27]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d108      	bne.n	8001934 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0210 	bic.w	r2, r2, #16
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	e007      	b.n	8001944 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0210 	orr.w	r2, r2, #16
 8001942:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7f1b      	ldrb	r3, [r3, #28]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d108      	bne.n	800195e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0208 	orr.w	r2, r2, #8
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e007      	b.n	800196e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0208 	bic.w	r2, r2, #8
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7f5b      	ldrb	r3, [r3, #29]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d108      	bne.n	8001988 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 0204 	orr.w	r2, r2, #4
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e007      	b.n	8001998 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0204 	bic.w	r2, r2, #4
 8001996:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	ea42 0103 	orr.w	r1, r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	1e5a      	subs	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b087      	sub	sp, #28
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ec:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80019ee:	7cfb      	ldrb	r3, [r7, #19]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d003      	beq.n	80019fc <HAL_CAN_ConfigFilter+0x26>
 80019f4:	7cfb      	ldrb	r3, [r7, #19]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	f040 80aa 	bne.w	8001b50 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a02:	f043 0201 	orr.w	r2, r3, #1
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	f003 031f 	and.w	r3, r3, #31
 8001a14:	2201      	movs	r2, #1
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	401a      	ands	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d123      	bne.n	8001a7e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	401a      	ands	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a58:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3248      	adds	r2, #72	; 0x48
 8001a5e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a72:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a74:	6979      	ldr	r1, [r7, #20]
 8001a76:	3348      	adds	r3, #72	; 0x48
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	440b      	add	r3, r1
 8001a7c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d122      	bne.n	8001acc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001aa6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3248      	adds	r2, #72	; 0x48
 8001aac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ac0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ac2:	6979      	ldr	r1, [r7, #20]
 8001ac4:	3348      	adds	r3, #72	; 0x48
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d109      	bne.n	8001ae8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	401a      	ands	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ae6:	e007      	b.n	8001af8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001b12:	e007      	b.n	8001b24 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d107      	bne.n	8001b3c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	431a      	orrs	r2, r3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b42:	f023 0201 	bic.w	r2, r3, #1
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e006      	b.n	8001b5e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
  }
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	371c      	adds	r7, #28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d12e      	bne.n	8001bda <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b94:	f7ff f8c0 	bl	8000d18 <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b9a:	e012      	b.n	8001bc2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b9c:	f7ff f8bc 	bl	8000d18 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b0a      	cmp	r3, #10
 8001ba8:	d90b      	bls.n	8001bc2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2205      	movs	r2, #5
 8001bba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e012      	b.n	8001be8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1e5      	bne.n	8001b9c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e006      	b.n	8001be8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
  }
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c04:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c0e:	7ffb      	ldrb	r3, [r7, #31]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d003      	beq.n	8001c1c <HAL_CAN_AddTxMessage+0x2c>
 8001c14:	7ffb      	ldrb	r3, [r7, #31]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	f040 80b8 	bne.w	8001d8c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10a      	bne.n	8001c3c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 80a0 	beq.w	8001d7c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	0e1b      	lsrs	r3, r3, #24
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d907      	bls.n	8001c5c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e09e      	b.n	8001d9a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	409a      	lsls	r2, r3
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10d      	bne.n	8001c8a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c78:	68f9      	ldr	r1, [r7, #12]
 8001c7a:	6809      	ldr	r1, [r1, #0]
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3318      	adds	r3, #24
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	440b      	add	r3, r1
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e00f      	b.n	8001caa <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c94:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c9a:	68f9      	ldr	r1, [r7, #12]
 8001c9c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c9e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3318      	adds	r3, #24
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	440b      	add	r3, r1
 8001ca8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6819      	ldr	r1, [r3, #0]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3318      	adds	r3, #24
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	440b      	add	r3, r1
 8001cba:	3304      	adds	r3, #4
 8001cbc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	7d1b      	ldrb	r3, [r3, #20]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d111      	bne.n	8001cea <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3318      	adds	r3, #24
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	6811      	ldr	r1, [r2, #0]
 8001cda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3318      	adds	r3, #24
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	440b      	add	r3, r1
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3307      	adds	r3, #7
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	061a      	lsls	r2, r3, #24
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3306      	adds	r3, #6
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	041b      	lsls	r3, r3, #16
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3305      	adds	r3, #5
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	021b      	lsls	r3, r3, #8
 8001d04:	4313      	orrs	r3, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	3204      	adds	r2, #4
 8001d0a:	7812      	ldrb	r2, [r2, #0]
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	6811      	ldr	r1, [r2, #0]
 8001d12:	ea43 0200 	orr.w	r2, r3, r0
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001d20:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3303      	adds	r3, #3
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	061a      	lsls	r2, r3, #24
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	041b      	lsls	r3, r3, #16
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3301      	adds	r3, #1
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	7812      	ldrb	r2, [r2, #0]
 8001d42:	4610      	mov	r0, r2
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	6811      	ldr	r1, [r2, #0]
 8001d48:	ea43 0200 	orr.w	r2, r3, r0
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	440b      	add	r3, r1
 8001d52:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001d56:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3318      	adds	r3, #24
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	4413      	add	r3, r2
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	6811      	ldr	r1, [r2, #0]
 8001d6a:	f043 0201 	orr.w	r2, r3, #1
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3318      	adds	r3, #24
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	440b      	add	r3, r1
 8001d76:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e00e      	b.n	8001d9a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e006      	b.n	8001d9a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
  }
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	; 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd6:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	60d3      	str	r3, [r2, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <__NVIC_GetPriorityGrouping+0x18>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	f003 0307 	and.w	r3, r3, #7
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	db0b      	blt.n	8001e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	f003 021f 	and.w	r2, r3, #31
 8001e20:	4906      	ldr	r1, [pc, #24]	; (8001e3c <__NVIC_EnableIRQ+0x34>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	2001      	movs	r0, #1
 8001e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100

08001e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db0a      	blt.n	8001e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	490c      	ldr	r1, [pc, #48]	; (8001e8c <__NVIC_SetPriority+0x4c>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	440b      	add	r3, r1
 8001e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e68:	e00a      	b.n	8001e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4908      	ldr	r1, [pc, #32]	; (8001e90 <__NVIC_SetPriority+0x50>)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3b04      	subs	r3, #4
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	761a      	strb	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000e100 	.word	0xe000e100
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f1c3 0307 	rsb	r3, r3, #7
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	bf28      	it	cs
 8001eb2:	2304      	movcs	r3, #4
 8001eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d902      	bls.n	8001ec4 <NVIC_EncodePriority+0x30>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3b03      	subs	r3, #3
 8001ec2:	e000      	b.n	8001ec6 <NVIC_EncodePriority+0x32>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43d9      	mvns	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	4313      	orrs	r3, r2
         );
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	; 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f08:	d301      	bcc.n	8001f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00f      	b.n	8001f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <SysTick_Config+0x40>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f16:	210f      	movs	r1, #15
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f7ff ff90 	bl	8001e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <SysTick_Config+0x40>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <SysTick_Config+0x40>)
 8001f28:	2207      	movs	r2, #7
 8001f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff2d 	bl	8001da4 <__NVIC_SetPriorityGrouping>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f64:	f7ff ff42 	bl	8001dec <__NVIC_GetPriorityGrouping>
 8001f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f7ff ff90 	bl	8001e94 <NVIC_EncodePriority>
 8001f74:	4602      	mov	r2, r0
 8001f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff5f 	bl	8001e40 <__NVIC_SetPriority>
}
 8001f82:	bf00      	nop
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff35 	bl	8001e08 <__NVIC_EnableIRQ>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ffa2 	bl	8001ef8 <SysTick_Config>
 8001fb4:	4603      	mov	r3, r0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e043      	b.n	800205e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b22      	ldr	r3, [pc, #136]	; (8002068 <HAL_DMA_Init+0xa8>)
 8001fde:	4413      	add	r3, r2
 8001fe0:	4a22      	ldr	r2, [pc, #136]	; (800206c <HAL_DMA_Init+0xac>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	009a      	lsls	r2, r3, #2
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <HAL_DMA_Init+0xb0>)
 8001ff2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800200a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800200e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002018:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002024:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002030:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	bffdfff8 	.word	0xbffdfff8
 800206c:	cccccccd 	.word	0xcccccccd
 8002070:	40020000 	.word	0x40020000

08002074 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	2204      	movs	r2, #4
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d04f      	beq.n	800213c <HAL_DMA_IRQHandler+0xc8>
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d04a      	beq.n	800213c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d107      	bne.n	80020c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0204 	bic.w	r2, r2, #4
 80020c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a66      	ldr	r2, [pc, #408]	; (8002264 <HAL_DMA_IRQHandler+0x1f0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d029      	beq.n	8002122 <HAL_DMA_IRQHandler+0xae>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a65      	ldr	r2, [pc, #404]	; (8002268 <HAL_DMA_IRQHandler+0x1f4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d022      	beq.n	800211e <HAL_DMA_IRQHandler+0xaa>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a63      	ldr	r2, [pc, #396]	; (800226c <HAL_DMA_IRQHandler+0x1f8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d01a      	beq.n	8002118 <HAL_DMA_IRQHandler+0xa4>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a62      	ldr	r2, [pc, #392]	; (8002270 <HAL_DMA_IRQHandler+0x1fc>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d012      	beq.n	8002112 <HAL_DMA_IRQHandler+0x9e>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a60      	ldr	r2, [pc, #384]	; (8002274 <HAL_DMA_IRQHandler+0x200>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00a      	beq.n	800210c <HAL_DMA_IRQHandler+0x98>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a5f      	ldr	r2, [pc, #380]	; (8002278 <HAL_DMA_IRQHandler+0x204>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d102      	bne.n	8002106 <HAL_DMA_IRQHandler+0x92>
 8002100:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002104:	e00e      	b.n	8002124 <HAL_DMA_IRQHandler+0xb0>
 8002106:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800210a:	e00b      	b.n	8002124 <HAL_DMA_IRQHandler+0xb0>
 800210c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002110:	e008      	b.n	8002124 <HAL_DMA_IRQHandler+0xb0>
 8002112:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002116:	e005      	b.n	8002124 <HAL_DMA_IRQHandler+0xb0>
 8002118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800211c:	e002      	b.n	8002124 <HAL_DMA_IRQHandler+0xb0>
 800211e:	2340      	movs	r3, #64	; 0x40
 8002120:	e000      	b.n	8002124 <HAL_DMA_IRQHandler+0xb0>
 8002122:	2304      	movs	r3, #4
 8002124:	4a55      	ldr	r2, [pc, #340]	; (800227c <HAL_DMA_IRQHandler+0x208>)
 8002126:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 8094 	beq.w	800225a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800213a:	e08e      	b.n	800225a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	2202      	movs	r2, #2
 8002142:	409a      	lsls	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d056      	beq.n	80021fa <HAL_DMA_IRQHandler+0x186>
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d051      	beq.n	80021fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0320 	and.w	r3, r3, #32
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10b      	bne.n	800217c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 020a 	bic.w	r2, r2, #10
 8002172:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a38      	ldr	r2, [pc, #224]	; (8002264 <HAL_DMA_IRQHandler+0x1f0>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d029      	beq.n	80021da <HAL_DMA_IRQHandler+0x166>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a37      	ldr	r2, [pc, #220]	; (8002268 <HAL_DMA_IRQHandler+0x1f4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d022      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x162>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a35      	ldr	r2, [pc, #212]	; (800226c <HAL_DMA_IRQHandler+0x1f8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01a      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x15c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a34      	ldr	r2, [pc, #208]	; (8002270 <HAL_DMA_IRQHandler+0x1fc>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d012      	beq.n	80021ca <HAL_DMA_IRQHandler+0x156>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a32      	ldr	r2, [pc, #200]	; (8002274 <HAL_DMA_IRQHandler+0x200>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00a      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x150>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a31      	ldr	r2, [pc, #196]	; (8002278 <HAL_DMA_IRQHandler+0x204>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d102      	bne.n	80021be <HAL_DMA_IRQHandler+0x14a>
 80021b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021bc:	e00e      	b.n	80021dc <HAL_DMA_IRQHandler+0x168>
 80021be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c2:	e00b      	b.n	80021dc <HAL_DMA_IRQHandler+0x168>
 80021c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c8:	e008      	b.n	80021dc <HAL_DMA_IRQHandler+0x168>
 80021ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021ce:	e005      	b.n	80021dc <HAL_DMA_IRQHandler+0x168>
 80021d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d4:	e002      	b.n	80021dc <HAL_DMA_IRQHandler+0x168>
 80021d6:	2320      	movs	r3, #32
 80021d8:	e000      	b.n	80021dc <HAL_DMA_IRQHandler+0x168>
 80021da:	2302      	movs	r3, #2
 80021dc:	4a27      	ldr	r2, [pc, #156]	; (800227c <HAL_DMA_IRQHandler+0x208>)
 80021de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d034      	beq.n	800225a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80021f8:	e02f      	b.n	800225a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	2208      	movs	r2, #8
 8002200:	409a      	lsls	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4013      	ands	r3, r2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d028      	beq.n	800225c <HAL_DMA_IRQHandler+0x1e8>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d023      	beq.n	800225c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 020e 	bic.w	r2, r2, #14
 8002222:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222c:	2101      	movs	r1, #1
 800222e:	fa01 f202 	lsl.w	r2, r1, r2
 8002232:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	2b00      	cmp	r3, #0
 8002250:	d004      	beq.n	800225c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	4798      	blx	r3
    }
  }
  return;
 800225a:	bf00      	nop
 800225c:	bf00      	nop
}
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40020008 	.word	0x40020008
 8002268:	4002001c 	.word	0x4002001c
 800226c:	40020030 	.word	0x40020030
 8002270:	40020044 	.word	0x40020044
 8002274:	40020058 	.word	0x40020058
 8002278:	4002006c 	.word	0x4002006c
 800227c:	40020000 	.word	0x40020000

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b08b      	sub	sp, #44	; 0x2c
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002292:	e169      	b.n	8002568 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002294:	2201      	movs	r2, #1
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	f040 8158 	bne.w	8002562 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4a9a      	ldr	r2, [pc, #616]	; (8002520 <HAL_GPIO_Init+0x2a0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d05e      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022bc:	4a98      	ldr	r2, [pc, #608]	; (8002520 <HAL_GPIO_Init+0x2a0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d875      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022c2:	4a98      	ldr	r2, [pc, #608]	; (8002524 <HAL_GPIO_Init+0x2a4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d058      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022c8:	4a96      	ldr	r2, [pc, #600]	; (8002524 <HAL_GPIO_Init+0x2a4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d86f      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022ce:	4a96      	ldr	r2, [pc, #600]	; (8002528 <HAL_GPIO_Init+0x2a8>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d052      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022d4:	4a94      	ldr	r2, [pc, #592]	; (8002528 <HAL_GPIO_Init+0x2a8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d869      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022da:	4a94      	ldr	r2, [pc, #592]	; (800252c <HAL_GPIO_Init+0x2ac>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d04c      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022e0:	4a92      	ldr	r2, [pc, #584]	; (800252c <HAL_GPIO_Init+0x2ac>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d863      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022e6:	4a92      	ldr	r2, [pc, #584]	; (8002530 <HAL_GPIO_Init+0x2b0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d046      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022ec:	4a90      	ldr	r2, [pc, #576]	; (8002530 <HAL_GPIO_Init+0x2b0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d85d      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022f2:	2b12      	cmp	r3, #18
 80022f4:	d82a      	bhi.n	800234c <HAL_GPIO_Init+0xcc>
 80022f6:	2b12      	cmp	r3, #18
 80022f8:	d859      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022fa:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <HAL_GPIO_Init+0x80>)
 80022fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002300:	0800237b 	.word	0x0800237b
 8002304:	08002355 	.word	0x08002355
 8002308:	08002367 	.word	0x08002367
 800230c:	080023a9 	.word	0x080023a9
 8002310:	080023af 	.word	0x080023af
 8002314:	080023af 	.word	0x080023af
 8002318:	080023af 	.word	0x080023af
 800231c:	080023af 	.word	0x080023af
 8002320:	080023af 	.word	0x080023af
 8002324:	080023af 	.word	0x080023af
 8002328:	080023af 	.word	0x080023af
 800232c:	080023af 	.word	0x080023af
 8002330:	080023af 	.word	0x080023af
 8002334:	080023af 	.word	0x080023af
 8002338:	080023af 	.word	0x080023af
 800233c:	080023af 	.word	0x080023af
 8002340:	080023af 	.word	0x080023af
 8002344:	0800235d 	.word	0x0800235d
 8002348:	08002371 	.word	0x08002371
 800234c:	4a79      	ldr	r2, [pc, #484]	; (8002534 <HAL_GPIO_Init+0x2b4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002352:	e02c      	b.n	80023ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	623b      	str	r3, [r7, #32]
          break;
 800235a:	e029      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	3304      	adds	r3, #4
 8002362:	623b      	str	r3, [r7, #32]
          break;
 8002364:	e024      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	3308      	adds	r3, #8
 800236c:	623b      	str	r3, [r7, #32]
          break;
 800236e:	e01f      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	330c      	adds	r3, #12
 8002376:	623b      	str	r3, [r7, #32]
          break;
 8002378:	e01a      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002382:	2304      	movs	r3, #4
 8002384:	623b      	str	r3, [r7, #32]
          break;
 8002386:	e013      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002390:	2308      	movs	r3, #8
 8002392:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	611a      	str	r2, [r3, #16]
          break;
 800239a:	e009      	b.n	80023b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800239c:	2308      	movs	r3, #8
 800239e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	615a      	str	r2, [r3, #20]
          break;
 80023a6:	e003      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023a8:	2300      	movs	r3, #0
 80023aa:	623b      	str	r3, [r7, #32]
          break;
 80023ac:	e000      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          break;
 80023ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2bff      	cmp	r3, #255	; 0xff
 80023b4:	d801      	bhi.n	80023ba <HAL_GPIO_Init+0x13a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	e001      	b.n	80023be <HAL_GPIO_Init+0x13e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2bff      	cmp	r3, #255	; 0xff
 80023c4:	d802      	bhi.n	80023cc <HAL_GPIO_Init+0x14c>
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	e002      	b.n	80023d2 <HAL_GPIO_Init+0x152>
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	3b08      	subs	r3, #8
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	210f      	movs	r1, #15
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	401a      	ands	r2, r3
 80023e4:	6a39      	ldr	r1, [r7, #32]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	431a      	orrs	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 80b1 	beq.w	8002562 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002400:	4b4d      	ldr	r3, [pc, #308]	; (8002538 <HAL_GPIO_Init+0x2b8>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4a4c      	ldr	r2, [pc, #304]	; (8002538 <HAL_GPIO_Init+0x2b8>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6193      	str	r3, [r2, #24]
 800240c:	4b4a      	ldr	r3, [pc, #296]	; (8002538 <HAL_GPIO_Init+0x2b8>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002418:	4a48      	ldr	r2, [pc, #288]	; (800253c <HAL_GPIO_Init+0x2bc>)
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002424:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	220f      	movs	r2, #15
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a40      	ldr	r2, [pc, #256]	; (8002540 <HAL_GPIO_Init+0x2c0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d013      	beq.n	800246c <HAL_GPIO_Init+0x1ec>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a3f      	ldr	r2, [pc, #252]	; (8002544 <HAL_GPIO_Init+0x2c4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00d      	beq.n	8002468 <HAL_GPIO_Init+0x1e8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a3e      	ldr	r2, [pc, #248]	; (8002548 <HAL_GPIO_Init+0x2c8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d007      	beq.n	8002464 <HAL_GPIO_Init+0x1e4>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a3d      	ldr	r2, [pc, #244]	; (800254c <HAL_GPIO_Init+0x2cc>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d101      	bne.n	8002460 <HAL_GPIO_Init+0x1e0>
 800245c:	2303      	movs	r3, #3
 800245e:	e006      	b.n	800246e <HAL_GPIO_Init+0x1ee>
 8002460:	2304      	movs	r3, #4
 8002462:	e004      	b.n	800246e <HAL_GPIO_Init+0x1ee>
 8002464:	2302      	movs	r3, #2
 8002466:	e002      	b.n	800246e <HAL_GPIO_Init+0x1ee>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <HAL_GPIO_Init+0x1ee>
 800246c:	2300      	movs	r3, #0
 800246e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002470:	f002 0203 	and.w	r2, r2, #3
 8002474:	0092      	lsls	r2, r2, #2
 8002476:	4093      	lsls	r3, r2
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800247e:	492f      	ldr	r1, [pc, #188]	; (800253c <HAL_GPIO_Init+0x2bc>)
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	3302      	adds	r3, #2
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d006      	beq.n	80024a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002498:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	492c      	ldr	r1, [pc, #176]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]
 80024a4:	e006      	b.n	80024b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024a6:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	4928      	ldr	r1, [pc, #160]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d006      	beq.n	80024ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024c0:	4b23      	ldr	r3, [pc, #140]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	4922      	ldr	r1, [pc, #136]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
 80024cc:	e006      	b.n	80024dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	491e      	ldr	r1, [pc, #120]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024d8:	4013      	ands	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d006      	beq.n	80024f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	4918      	ldr	r1, [pc, #96]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	608b      	str	r3, [r1, #8]
 80024f4:	e006      	b.n	8002504 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	4914      	ldr	r1, [pc, #80]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 8002500:	4013      	ands	r3, r2
 8002502:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d021      	beq.n	8002554 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	490e      	ldr	r1, [pc, #56]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	60cb      	str	r3, [r1, #12]
 800251c:	e021      	b.n	8002562 <HAL_GPIO_Init+0x2e2>
 800251e:	bf00      	nop
 8002520:	10320000 	.word	0x10320000
 8002524:	10310000 	.word	0x10310000
 8002528:	10220000 	.word	0x10220000
 800252c:	10210000 	.word	0x10210000
 8002530:	10120000 	.word	0x10120000
 8002534:	10110000 	.word	0x10110000
 8002538:	40021000 	.word	0x40021000
 800253c:	40010000 	.word	0x40010000
 8002540:	40010800 	.word	0x40010800
 8002544:	40010c00 	.word	0x40010c00
 8002548:	40011000 	.word	0x40011000
 800254c:	40011400 	.word	0x40011400
 8002550:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_GPIO_Init+0x304>)
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	43db      	mvns	r3, r3
 800255c:	4909      	ldr	r1, [pc, #36]	; (8002584 <HAL_GPIO_Init+0x304>)
 800255e:	4013      	ands	r3, r2
 8002560:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	3301      	adds	r3, #1
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	fa22 f303 	lsr.w	r3, r2, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	f47f ae8e 	bne.w	8002294 <HAL_GPIO_Init+0x14>
  }
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	372c      	adds	r7, #44	; 0x2c
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	40010400 	.word	0x40010400

08002588 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	887b      	ldrh	r3, [r7, #2]
 800259a:	4013      	ands	r3, r2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	e001      	b.n	80025aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	807b      	strh	r3, [r7, #2]
 80025c2:	4613      	mov	r3, r2
 80025c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025c6:	787b      	ldrb	r3, [r7, #1]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025cc:	887a      	ldrh	r2, [r7, #2]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025d2:	e003      	b.n	80025dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025d4:	887b      	ldrh	r3, [r7, #2]
 80025d6:	041a      	lsls	r2, r3, #16
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	611a      	str	r2, [r3, #16]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e272      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8087 	beq.w	8002716 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002608:	4b92      	ldr	r3, [pc, #584]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 030c 	and.w	r3, r3, #12
 8002610:	2b04      	cmp	r3, #4
 8002612:	d00c      	beq.n	800262e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002614:	4b8f      	ldr	r3, [pc, #572]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	2b08      	cmp	r3, #8
 800261e:	d112      	bne.n	8002646 <HAL_RCC_OscConfig+0x5e>
 8002620:	4b8c      	ldr	r3, [pc, #560]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262c:	d10b      	bne.n	8002646 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262e:	4b89      	ldr	r3, [pc, #548]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d06c      	beq.n	8002714 <HAL_RCC_OscConfig+0x12c>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d168      	bne.n	8002714 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e24c      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264e:	d106      	bne.n	800265e <HAL_RCC_OscConfig+0x76>
 8002650:	4b80      	ldr	r3, [pc, #512]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a7f      	ldr	r2, [pc, #508]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	e02e      	b.n	80026bc <HAL_RCC_OscConfig+0xd4>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0x98>
 8002666:	4b7b      	ldr	r3, [pc, #492]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a7a      	ldr	r2, [pc, #488]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 800266c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b78      	ldr	r3, [pc, #480]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a77      	ldr	r2, [pc, #476]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e01d      	b.n	80026bc <HAL_RCC_OscConfig+0xd4>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0xbc>
 800268a:	4b72      	ldr	r3, [pc, #456]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a71      	ldr	r2, [pc, #452]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b6f      	ldr	r3, [pc, #444]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6e      	ldr	r2, [pc, #440]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e00b      	b.n	80026bc <HAL_RCC_OscConfig+0xd4>
 80026a4:	4b6b      	ldr	r3, [pc, #428]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a6a      	ldr	r2, [pc, #424]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b68      	ldr	r3, [pc, #416]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a67      	ldr	r2, [pc, #412]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7fe fb28 	bl	8000d18 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026cc:	f7fe fb24 	bl	8000d18 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e200      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b5d      	ldr	r3, [pc, #372]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0xe4>
 80026ea:	e014      	b.n	8002716 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe fb14 	bl	8000d18 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f4:	f7fe fb10 	bl	8000d18 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	; 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e1ec      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002706:	4b53      	ldr	r3, [pc, #332]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x10c>
 8002712:	e000      	b.n	8002716 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d063      	beq.n	80027ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002722:	4b4c      	ldr	r3, [pc, #304]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800272e:	4b49      	ldr	r3, [pc, #292]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b08      	cmp	r3, #8
 8002738:	d11c      	bne.n	8002774 <HAL_RCC_OscConfig+0x18c>
 800273a:	4b46      	ldr	r3, [pc, #280]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d116      	bne.n	8002774 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002746:	4b43      	ldr	r3, [pc, #268]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_RCC_OscConfig+0x176>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d001      	beq.n	800275e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e1c0      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4939      	ldr	r1, [pc, #228]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002772:	e03a      	b.n	80027ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800277c:	4b36      	ldr	r3, [pc, #216]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7fe fac9 	bl	8000d18 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278a:	f7fe fac5 	bl	8000d18 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e1a1      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4927      	ldr	r1, [pc, #156]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
 80027bc:	e015      	b.n	80027ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027be:	4b26      	ldr	r3, [pc, #152]	; (8002858 <HAL_RCC_OscConfig+0x270>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7fe faa8 	bl	8000d18 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027cc:	f7fe faa4 	bl	8000d18 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e180      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d03a      	beq.n	800286c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d019      	beq.n	8002832 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fe:	4b17      	ldr	r3, [pc, #92]	; (800285c <HAL_RCC_OscConfig+0x274>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002804:	f7fe fa88 	bl	8000d18 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280c:	f7fe fa84 	bl	8000d18 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e160      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800282a:	2001      	movs	r0, #1
 800282c:	f000 fad8 	bl	8002de0 <RCC_Delay>
 8002830:	e01c      	b.n	800286c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <HAL_RCC_OscConfig+0x274>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002838:	f7fe fa6e 	bl	8000d18 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283e:	e00f      	b.n	8002860 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002840:	f7fe fa6a 	bl	8000d18 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d908      	bls.n	8002860 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e146      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4f8>
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
 8002858:	42420000 	.word	0x42420000
 800285c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002860:	4b92      	ldr	r3, [pc, #584]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1e9      	bne.n	8002840 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80a6 	beq.w	80029c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287a:	2300      	movs	r3, #0
 800287c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287e:	4b8b      	ldr	r3, [pc, #556]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10d      	bne.n	80028a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288a:	4b88      	ldr	r3, [pc, #544]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	4a87      	ldr	r2, [pc, #540]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002894:	61d3      	str	r3, [r2, #28]
 8002896:	4b85      	ldr	r3, [pc, #532]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a6:	4b82      	ldr	r3, [pc, #520]	; (8002ab0 <HAL_RCC_OscConfig+0x4c8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d118      	bne.n	80028e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b2:	4b7f      	ldr	r3, [pc, #508]	; (8002ab0 <HAL_RCC_OscConfig+0x4c8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a7e      	ldr	r2, [pc, #504]	; (8002ab0 <HAL_RCC_OscConfig+0x4c8>)
 80028b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028be:	f7fe fa2b 	bl	8000d18 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c6:	f7fe fa27 	bl	8000d18 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b64      	cmp	r3, #100	; 0x64
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e103      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d8:	4b75      	ldr	r3, [pc, #468]	; (8002ab0 <HAL_RCC_OscConfig+0x4c8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0x312>
 80028ec:	4b6f      	ldr	r3, [pc, #444]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	4a6e      	ldr	r2, [pc, #440]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6213      	str	r3, [r2, #32]
 80028f8:	e02d      	b.n	8002956 <HAL_RCC_OscConfig+0x36e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10c      	bne.n	800291c <HAL_RCC_OscConfig+0x334>
 8002902:	4b6a      	ldr	r3, [pc, #424]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4a69      	ldr	r2, [pc, #420]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6213      	str	r3, [r2, #32]
 800290e:	4b67      	ldr	r3, [pc, #412]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	4a66      	ldr	r2, [pc, #408]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002914:	f023 0304 	bic.w	r3, r3, #4
 8002918:	6213      	str	r3, [r2, #32]
 800291a:	e01c      	b.n	8002956 <HAL_RCC_OscConfig+0x36e>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b05      	cmp	r3, #5
 8002922:	d10c      	bne.n	800293e <HAL_RCC_OscConfig+0x356>
 8002924:	4b61      	ldr	r3, [pc, #388]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4a60      	ldr	r2, [pc, #384]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	6213      	str	r3, [r2, #32]
 8002930:	4b5e      	ldr	r3, [pc, #376]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4a5d      	ldr	r2, [pc, #372]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6213      	str	r3, [r2, #32]
 800293c:	e00b      	b.n	8002956 <HAL_RCC_OscConfig+0x36e>
 800293e:	4b5b      	ldr	r3, [pc, #364]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4a5a      	ldr	r2, [pc, #360]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	6213      	str	r3, [r2, #32]
 800294a:	4b58      	ldr	r3, [pc, #352]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	4a57      	ldr	r2, [pc, #348]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002950:	f023 0304 	bic.w	r3, r3, #4
 8002954:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d015      	beq.n	800298a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295e:	f7fe f9db 	bl	8000d18 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002964:	e00a      	b.n	800297c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002966:	f7fe f9d7 	bl	8000d18 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f241 3288 	movw	r2, #5000	; 0x1388
 8002974:	4293      	cmp	r3, r2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e0b1      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297c:	4b4b      	ldr	r3, [pc, #300]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0ee      	beq.n	8002966 <HAL_RCC_OscConfig+0x37e>
 8002988:	e014      	b.n	80029b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298a:	f7fe f9c5 	bl	8000d18 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002990:	e00a      	b.n	80029a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002992:	f7fe f9c1 	bl	8000d18 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e09b      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a8:	4b40      	ldr	r3, [pc, #256]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1ee      	bne.n	8002992 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d105      	bne.n	80029c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ba:	4b3c      	ldr	r3, [pc, #240]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	4a3b      	ldr	r2, [pc, #236]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 80029c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8087 	beq.w	8002ade <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029d0:	4b36      	ldr	r3, [pc, #216]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d061      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d146      	bne.n	8002a72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e4:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <HAL_RCC_OscConfig+0x4cc>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ea:	f7fe f995 	bl	8000d18 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f2:	f7fe f991 	bl	8000d18 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e06d      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a04:	4b29      	ldr	r3, [pc, #164]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f0      	bne.n	80029f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a18:	d108      	bne.n	8002a2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a1a:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	4921      	ldr	r1, [pc, #132]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a2c:	4b1f      	ldr	r3, [pc, #124]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a19      	ldr	r1, [r3, #32]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	491b      	ldr	r1, [pc, #108]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a44:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <HAL_RCC_OscConfig+0x4cc>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4a:	f7fe f965 	bl	8000d18 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a52:	f7fe f961 	bl	8000d18 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e03d      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x46a>
 8002a70:	e035      	b.n	8002ade <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <HAL_RCC_OscConfig+0x4cc>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a78:	f7fe f94e 	bl	8000d18 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a80:	f7fe f94a 	bl	8000d18 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e026      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x498>
 8002a9e:	e01e      	b.n	8002ade <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d107      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e019      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4f8>
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40007000 	.word	0x40007000
 8002ab4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_RCC_OscConfig+0x500>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d106      	bne.n	8002ada <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40021000 	.word	0x40021000

08002aec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0d0      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b00:	4b6a      	ldr	r3, [pc, #424]	; (8002cac <HAL_RCC_ClockConfig+0x1c0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d910      	bls.n	8002b30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b67      	ldr	r3, [pc, #412]	; (8002cac <HAL_RCC_ClockConfig+0x1c0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 0207 	bic.w	r2, r3, #7
 8002b16:	4965      	ldr	r1, [pc, #404]	; (8002cac <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1e:	4b63      	ldr	r3, [pc, #396]	; (8002cac <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0b8      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d020      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b48:	4b59      	ldr	r3, [pc, #356]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	4a58      	ldr	r2, [pc, #352]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b60:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4a52      	ldr	r2, [pc, #328]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b6c:	4b50      	ldr	r3, [pc, #320]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	494d      	ldr	r1, [pc, #308]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d040      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d107      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	4b47      	ldr	r3, [pc, #284]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d115      	bne.n	8002bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e07f      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002baa:	4b41      	ldr	r3, [pc, #260]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e073      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bba:	4b3d      	ldr	r3, [pc, #244]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e06b      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bca:	4b39      	ldr	r3, [pc, #228]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f023 0203 	bic.w	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4936      	ldr	r1, [pc, #216]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bdc:	f7fe f89c 	bl	8000d18 <HAL_GetTick>
 8002be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be4:	f7fe f898 	bl	8000d18 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e053      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 020c 	and.w	r2, r3, #12
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d1eb      	bne.n	8002be4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c0c:	4b27      	ldr	r3, [pc, #156]	; (8002cac <HAL_RCC_ClockConfig+0x1c0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d210      	bcs.n	8002c3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1a:	4b24      	ldr	r3, [pc, #144]	; (8002cac <HAL_RCC_ClockConfig+0x1c0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 0207 	bic.w	r2, r3, #7
 8002c22:	4922      	ldr	r1, [pc, #136]	; (8002cac <HAL_RCC_ClockConfig+0x1c0>)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2a:	4b20      	ldr	r3, [pc, #128]	; (8002cac <HAL_RCC_ClockConfig+0x1c0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e032      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4916      	ldr	r1, [pc, #88]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	490e      	ldr	r1, [pc, #56]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c7a:	f000 f821 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	091b      	lsrs	r3, r3, #4
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	490a      	ldr	r1, [pc, #40]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8c:	5ccb      	ldrb	r3, [r1, r3]
 8002c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c92:	4a09      	ldr	r2, [pc, #36]	; (8002cb8 <HAL_RCC_ClockConfig+0x1cc>)
 8002c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_RCC_ClockConfig+0x1d0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd fffa 	bl	8000c94 <HAL_InitTick>

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40022000 	.word	0x40022000
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	08003824 	.word	0x08003824
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	20000004 	.word	0x20000004

08002cc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc0:	b490      	push	{r4, r7}
 8002cc2:	b08a      	sub	sp, #40	; 0x28
 8002cc4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cc6:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xac>)
 8002cc8:	1d3c      	adds	r4, r7, #4
 8002cca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ccc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cd0:	f240 2301 	movw	r3, #513	; 0x201
 8002cd4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cea:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d002      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0x40>
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d003      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0x46>
 8002cfe:	e02b      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d00:	4b1c      	ldr	r3, [pc, #112]	; (8002d74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d02:	623b      	str	r3, [r7, #32]
      break;
 8002d04:	e02b      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	0c9b      	lsrs	r3, r3, #18
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	3328      	adds	r3, #40	; 0x28
 8002d10:	443b      	add	r3, r7
 8002d12:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d16:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d012      	beq.n	8002d48 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d22:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	0c5b      	lsrs	r3, r3, #17
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	3328      	adds	r3, #40	; 0x28
 8002d2e:	443b      	add	r3, r7
 8002d30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d34:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	4a0e      	ldr	r2, [pc, #56]	; (8002d74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d3a:	fb03 f202 	mul.w	r2, r3, r2
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
 8002d46:	e004      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	4a0b      	ldr	r2, [pc, #44]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d4c:	fb02 f303 	mul.w	r3, r2, r3
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	623b      	str	r3, [r7, #32]
      break;
 8002d56:	e002      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d5a:	623b      	str	r3, [r7, #32]
      break;
 8002d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3728      	adds	r7, #40	; 0x28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc90      	pop	{r4, r7}
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	08003804 	.word	0x08003804
 8002d70:	40021000 	.word	0x40021000
 8002d74:	007a1200 	.word	0x007a1200
 8002d78:	003d0900 	.word	0x003d0900

08002d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d80:	4b02      	ldr	r3, [pc, #8]	; (8002d8c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d82:	681b      	ldr	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	20000000 	.word	0x20000000

08002d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d94:	f7ff fff2 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	4903      	ldr	r1, [pc, #12]	; (8002db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002da6:	5ccb      	ldrb	r3, [r1, r3]
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40021000 	.word	0x40021000
 8002db4:	08003834 	.word	0x08003834

08002db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dbc:	f7ff ffde 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	0adb      	lsrs	r3, r3, #11
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4903      	ldr	r1, [pc, #12]	; (8002ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	08003834 	.word	0x08003834

08002de0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002de8:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <RCC_Delay+0x34>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <RCC_Delay+0x38>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	0a5b      	lsrs	r3, r3, #9
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
 8002dfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dfc:	bf00      	nop
  }
  while (Delay --);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1e5a      	subs	r2, r3, #1
 8002e02:	60fa      	str	r2, [r7, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f9      	bne.n	8002dfc <RCC_Delay+0x1c>
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	20000000 	.word	0x20000000
 8002e18:	10624dd3 	.word	0x10624dd3

08002e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d07d      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3c:	4b4f      	ldr	r3, [pc, #316]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10d      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e48:	4b4c      	ldr	r3, [pc, #304]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	4a4b      	ldr	r2, [pc, #300]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e52:	61d3      	str	r3, [r2, #28]
 8002e54:	4b49      	ldr	r3, [pc, #292]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e60:	2301      	movs	r3, #1
 8002e62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	4b46      	ldr	r3, [pc, #280]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d118      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e70:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a42      	ldr	r2, [pc, #264]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7c:	f7fd ff4c 	bl	8000d18 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e82:	e008      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e84:	f7fd ff48 	bl	8000d18 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	; 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e06d      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e96:	4b3a      	ldr	r3, [pc, #232]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ea2:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eaa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d02e      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d027      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ec0:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002eca:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed0:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ed6:	4a29      	ldr	r2, [pc, #164]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d014      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fd ff17 	bl	8000d18 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7fd ff13 	bl	8000d18 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e036      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0ee      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f10:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4917      	ldr	r1, [pc, #92]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f22:	7dfb      	ldrb	r3, [r7, #23]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d105      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f28:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	4a13      	ldr	r2, [pc, #76]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	490b      	ldr	r1, [pc, #44]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f5e:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	4904      	ldr	r1, [pc, #16]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40007000 	.word	0x40007000
 8002f84:	42420440 	.word	0x42420440

08002f88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b08d      	sub	sp, #52	; 0x34
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f90:	4b58      	ldr	r3, [pc, #352]	; (80030f4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002f92:	f107 040c 	add.w	r4, r7, #12
 8002f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f9c:	f240 2301 	movw	r3, #513	; 0x201
 8002fa0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002faa:	2300      	movs	r3, #0
 8002fac:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b10      	cmp	r3, #16
 8002fba:	d00a      	beq.n	8002fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b10      	cmp	r3, #16
 8002fc0:	f200 808e 	bhi.w	80030e0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d049      	beq.n	800305e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d079      	beq.n	80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002fd0:	e086      	b.n	80030e0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002fd2:	4b49      	ldr	r3, [pc, #292]	; (80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002fd8:	4b47      	ldr	r3, [pc, #284]	; (80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d07f      	beq.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	0c9b      	lsrs	r3, r3, #18
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	3330      	adds	r3, #48	; 0x30
 8002fee:	443b      	add	r3, r7
 8002ff0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ff4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d017      	beq.n	8003030 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003000:	4b3d      	ldr	r3, [pc, #244]	; (80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	0c5b      	lsrs	r3, r3, #17
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	3330      	adds	r3, #48	; 0x30
 800300c:	443b      	add	r3, r7
 800300e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00d      	beq.n	800303a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800301e:	4a37      	ldr	r2, [pc, #220]	; (80030fc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	fbb2 f2f3 	udiv	r2, r2, r3
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	fb02 f303 	mul.w	r3, r2, r3
 800302c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800302e:	e004      	b.n	800303a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	4a33      	ldr	r2, [pc, #204]	; (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003034:	fb02 f303 	mul.w	r3, r2, r3
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800303a:	4b2f      	ldr	r3, [pc, #188]	; (80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003046:	d102      	bne.n	800304e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800304c:	e04a      	b.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4a2c      	ldr	r2, [pc, #176]	; (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003054:	fba2 2303 	umull	r2, r3, r2, r3
 8003058:	085b      	lsrs	r3, r3, #1
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800305c:	e042      	b.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800305e:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800306e:	d108      	bne.n	8003082 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800307a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800307e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003080:	e01f      	b.n	80030c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800308c:	d109      	bne.n	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800308e:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800309a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800309e:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a0:	e00f      	b.n	80030c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ac:	d11c      	bne.n	80030e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80030ae:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d016      	beq.n	80030e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80030ba:	f24f 4324 	movw	r3, #62500	; 0xf424
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80030c0:	e012      	b.n	80030e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80030c2:	e011      	b.n	80030e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80030c4:	f7ff fe78 	bl	8002db8 <HAL_RCC_GetPCLK2Freq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	0b9b      	lsrs	r3, r3, #14
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	3301      	adds	r3, #1
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80030de:	e004      	b.n	80030ea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80030e0:	bf00      	nop
 80030e2:	e002      	b.n	80030ea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80030e4:	bf00      	nop
 80030e6:	e000      	b.n	80030ea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80030e8:	bf00      	nop
    }
  }
  return (frequency);
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3734      	adds	r7, #52	; 0x34
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd90      	pop	{r4, r7, pc}
 80030f4:	08003814 	.word	0x08003814
 80030f8:	40021000 	.word	0x40021000
 80030fc:	007a1200 	.word	0x007a1200
 8003100:	003d0900 	.word	0x003d0900
 8003104:	aaaaaaab 	.word	0xaaaaaaab

08003108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e041      	b.n	800319e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fd fcc8 	bl	8000ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3304      	adds	r3, #4
 8003144:	4619      	mov	r1, r3
 8003146:	4610      	mov	r0, r2
 8003148:	f000 f8f2 	bl	8003330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_TIM_ConfigClockSource+0x18>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e0b3      	b.n	8003326 <HAL_TIM_ConfigClockSource+0x180>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2202      	movs	r2, #2
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031dc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031e4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f6:	d03e      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0xd0>
 80031f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fc:	f200 8087 	bhi.w	800330e <HAL_TIM_ConfigClockSource+0x168>
 8003200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003204:	f000 8085 	beq.w	8003312 <HAL_TIM_ConfigClockSource+0x16c>
 8003208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320c:	d87f      	bhi.n	800330e <HAL_TIM_ConfigClockSource+0x168>
 800320e:	2b70      	cmp	r3, #112	; 0x70
 8003210:	d01a      	beq.n	8003248 <HAL_TIM_ConfigClockSource+0xa2>
 8003212:	2b70      	cmp	r3, #112	; 0x70
 8003214:	d87b      	bhi.n	800330e <HAL_TIM_ConfigClockSource+0x168>
 8003216:	2b60      	cmp	r3, #96	; 0x60
 8003218:	d050      	beq.n	80032bc <HAL_TIM_ConfigClockSource+0x116>
 800321a:	2b60      	cmp	r3, #96	; 0x60
 800321c:	d877      	bhi.n	800330e <HAL_TIM_ConfigClockSource+0x168>
 800321e:	2b50      	cmp	r3, #80	; 0x50
 8003220:	d03c      	beq.n	800329c <HAL_TIM_ConfigClockSource+0xf6>
 8003222:	2b50      	cmp	r3, #80	; 0x50
 8003224:	d873      	bhi.n	800330e <HAL_TIM_ConfigClockSource+0x168>
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	d058      	beq.n	80032dc <HAL_TIM_ConfigClockSource+0x136>
 800322a:	2b40      	cmp	r3, #64	; 0x40
 800322c:	d86f      	bhi.n	800330e <HAL_TIM_ConfigClockSource+0x168>
 800322e:	2b30      	cmp	r3, #48	; 0x30
 8003230:	d064      	beq.n	80032fc <HAL_TIM_ConfigClockSource+0x156>
 8003232:	2b30      	cmp	r3, #48	; 0x30
 8003234:	d86b      	bhi.n	800330e <HAL_TIM_ConfigClockSource+0x168>
 8003236:	2b20      	cmp	r3, #32
 8003238:	d060      	beq.n	80032fc <HAL_TIM_ConfigClockSource+0x156>
 800323a:	2b20      	cmp	r3, #32
 800323c:	d867      	bhi.n	800330e <HAL_TIM_ConfigClockSource+0x168>
 800323e:	2b00      	cmp	r3, #0
 8003240:	d05c      	beq.n	80032fc <HAL_TIM_ConfigClockSource+0x156>
 8003242:	2b10      	cmp	r3, #16
 8003244:	d05a      	beq.n	80032fc <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003246:	e062      	b.n	800330e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	6899      	ldr	r1, [r3, #8]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f000 f943 	bl	80034e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800326a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	609a      	str	r2, [r3, #8]
      break;
 8003274:	e04e      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	6899      	ldr	r1, [r3, #8]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f000 f92c 	bl	80034e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003298:	609a      	str	r2, [r3, #8]
      break;
 800329a:	e03b      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	461a      	mov	r2, r3
 80032aa:	f000 f8a3 	bl	80033f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2150      	movs	r1, #80	; 0x50
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 f8fa 	bl	80034ae <TIM_ITRx_SetConfig>
      break;
 80032ba:	e02b      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	461a      	mov	r2, r3
 80032ca:	f000 f8c1 	bl	8003450 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2160      	movs	r1, #96	; 0x60
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 f8ea 	bl	80034ae <TIM_ITRx_SetConfig>
      break;
 80032da:	e01b      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	461a      	mov	r2, r3
 80032ea:	f000 f883 	bl	80033f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2140      	movs	r1, #64	; 0x40
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 f8da 	bl	80034ae <TIM_ITRx_SetConfig>
      break;
 80032fa:	e00b      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4619      	mov	r1, r3
 8003306:	4610      	mov	r0, r2
 8003308:	f000 f8d1 	bl	80034ae <TIM_ITRx_SetConfig>
        break;
 800330c:	e002      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800330e:	bf00      	nop
 8003310:	e000      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003312:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a29      	ldr	r2, [pc, #164]	; (80033e8 <TIM_Base_SetConfig+0xb8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00b      	beq.n	8003360 <TIM_Base_SetConfig+0x30>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334e:	d007      	beq.n	8003360 <TIM_Base_SetConfig+0x30>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a26      	ldr	r2, [pc, #152]	; (80033ec <TIM_Base_SetConfig+0xbc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <TIM_Base_SetConfig+0x30>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a25      	ldr	r2, [pc, #148]	; (80033f0 <TIM_Base_SetConfig+0xc0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d108      	bne.n	8003372 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a1c      	ldr	r2, [pc, #112]	; (80033e8 <TIM_Base_SetConfig+0xb8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00b      	beq.n	8003392 <TIM_Base_SetConfig+0x62>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003380:	d007      	beq.n	8003392 <TIM_Base_SetConfig+0x62>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a19      	ldr	r2, [pc, #100]	; (80033ec <TIM_Base_SetConfig+0xbc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d003      	beq.n	8003392 <TIM_Base_SetConfig+0x62>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <TIM_Base_SetConfig+0xc0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d108      	bne.n	80033a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <TIM_Base_SetConfig+0xb8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d103      	bne.n	80033d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	615a      	str	r2, [r3, #20]
}
 80033de:	bf00      	nop
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40000400 	.word	0x40000400
 80033f0:	40000800 	.word	0x40000800

080033f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f023 0201 	bic.w	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800341e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f023 030a 	bic.w	r3, r3, #10
 8003430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	621a      	str	r2, [r3, #32]
}
 8003446:	bf00      	nop
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f023 0210 	bic.w	r2, r3, #16
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800347a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	031b      	lsls	r3, r3, #12
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800348c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	621a      	str	r2, [r3, #32]
}
 80034a4:	bf00      	nop
 80034a6:	371c      	adds	r7, #28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr

080034ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b085      	sub	sp, #20
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f043 0307 	orr.w	r3, r3, #7
 80034d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	609a      	str	r2, [r3, #8]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr

080034e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b087      	sub	sp, #28
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	021a      	lsls	r2, r3, #8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	431a      	orrs	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4313      	orrs	r3, r2
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	609a      	str	r2, [r3, #8]
}
 8003516:	bf00      	nop
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003534:	2302      	movs	r3, #2
 8003536:	e046      	b.n	80035c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a16      	ldr	r2, [pc, #88]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00e      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003584:	d009      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d004      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a10      	ldr	r2, [pc, #64]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d10c      	bne.n	80035b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40000400 	.word	0x40000400
 80035d8:	40000800 	.word	0x40000800

080035dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e03f      	b.n	800366e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fd fa7c 	bl	8000b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2224      	movs	r2, #36	; 0x24
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800361e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f829 	bl	8003678 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036b2:	f023 030c 	bic.w	r3, r3, #12
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	430b      	orrs	r3, r1
 80036be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a2c      	ldr	r2, [pc, #176]	; (800378c <UART_SetConfig+0x114>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d103      	bne.n	80036e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036e0:	f7ff fb6a 	bl	8002db8 <HAL_RCC_GetPCLK2Freq>
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	e002      	b.n	80036ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036e8:	f7ff fb52 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 80036ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	009a      	lsls	r2, r3, #2
 80036f8:	441a      	add	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	4a22      	ldr	r2, [pc, #136]	; (8003790 <UART_SetConfig+0x118>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	0119      	lsls	r1, r3, #4
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009a      	lsls	r2, r3, #2
 8003718:	441a      	add	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	fbb2 f2f3 	udiv	r2, r2, r3
 8003724:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <UART_SetConfig+0x118>)
 8003726:	fba3 0302 	umull	r0, r3, r3, r2
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	2064      	movs	r0, #100	; 0x64
 800372e:	fb00 f303 	mul.w	r3, r0, r3
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	3332      	adds	r3, #50	; 0x32
 8003738:	4a15      	ldr	r2, [pc, #84]	; (8003790 <UART_SetConfig+0x118>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003744:	4419      	add	r1, r3
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009a      	lsls	r2, r3, #2
 8003750:	441a      	add	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	fbb2 f2f3 	udiv	r2, r2, r3
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <UART_SetConfig+0x118>)
 800375e:	fba3 0302 	umull	r0, r3, r3, r2
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2064      	movs	r0, #100	; 0x64
 8003766:	fb00 f303 	mul.w	r3, r0, r3
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	3332      	adds	r3, #50	; 0x32
 8003770:	4a07      	ldr	r2, [pc, #28]	; (8003790 <UART_SetConfig+0x118>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	f003 020f 	and.w	r2, r3, #15
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	440a      	add	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003784:	bf00      	nop
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40013800 	.word	0x40013800
 8003790:	51eb851f 	.word	0x51eb851f

08003794 <__libc_init_array>:
 8003794:	b570      	push	{r4, r5, r6, lr}
 8003796:	2600      	movs	r6, #0
 8003798:	4d0c      	ldr	r5, [pc, #48]	; (80037cc <__libc_init_array+0x38>)
 800379a:	4c0d      	ldr	r4, [pc, #52]	; (80037d0 <__libc_init_array+0x3c>)
 800379c:	1b64      	subs	r4, r4, r5
 800379e:	10a4      	asrs	r4, r4, #2
 80037a0:	42a6      	cmp	r6, r4
 80037a2:	d109      	bne.n	80037b8 <__libc_init_array+0x24>
 80037a4:	f000 f822 	bl	80037ec <_init>
 80037a8:	2600      	movs	r6, #0
 80037aa:	4d0a      	ldr	r5, [pc, #40]	; (80037d4 <__libc_init_array+0x40>)
 80037ac:	4c0a      	ldr	r4, [pc, #40]	; (80037d8 <__libc_init_array+0x44>)
 80037ae:	1b64      	subs	r4, r4, r5
 80037b0:	10a4      	asrs	r4, r4, #2
 80037b2:	42a6      	cmp	r6, r4
 80037b4:	d105      	bne.n	80037c2 <__libc_init_array+0x2e>
 80037b6:	bd70      	pop	{r4, r5, r6, pc}
 80037b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037bc:	4798      	blx	r3
 80037be:	3601      	adds	r6, #1
 80037c0:	e7ee      	b.n	80037a0 <__libc_init_array+0xc>
 80037c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c6:	4798      	blx	r3
 80037c8:	3601      	adds	r6, #1
 80037ca:	e7f2      	b.n	80037b2 <__libc_init_array+0x1e>
 80037cc:	0800383c 	.word	0x0800383c
 80037d0:	0800383c 	.word	0x0800383c
 80037d4:	0800383c 	.word	0x0800383c
 80037d8:	08003840 	.word	0x08003840

080037dc <memset>:
 80037dc:	4603      	mov	r3, r0
 80037de:	4402      	add	r2, r0
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d100      	bne.n	80037e6 <memset+0xa>
 80037e4:	4770      	bx	lr
 80037e6:	f803 1b01 	strb.w	r1, [r3], #1
 80037ea:	e7f9      	b.n	80037e0 <memset+0x4>

080037ec <_init>:
 80037ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ee:	bf00      	nop
 80037f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037f2:	bc08      	pop	{r3}
 80037f4:	469e      	mov	lr, r3
 80037f6:	4770      	bx	lr

080037f8 <_fini>:
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	bf00      	nop
 80037fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fe:	bc08      	pop	{r3}
 8003800:	469e      	mov	lr, r3
 8003802:	4770      	bx	lr
